// Code generated by go-bindata.
// sources:
// context.go.tpl
// DO NOT EDIT!

package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x6f\xdb\xc8\xd5\xbe\x26\x7f\xc5\x89\xf0\xda\x20\xfd\xca\x94\xb3\xbb\x48\x0b\xad\xb5\x80\xe5\x24\x45\x80\x38\x31\xe2\xa4\x7b\x51\x14\xc5\x98\x1c\xd2\x03\x93\x1c\x76\x38\x8c\xad\xaa\xfa\xef\xc5\x99\x0f\x72\x48\x51\xb2\x9c\xe4\xa2\x58\xd4\x37\xb6\x38\xc3\xe7\x7c\x3f\x73\xce\xc8\xb3\x19\x5c\xf2\x84\x42\x46\x4b\x2a\x88\xa4\x09\xdc\xae\xa0\x66\xc5\x2d\x89\xe0\xf5\x47\xf8\xf0\xf1\x33\xbc\x79\xfd\xee\x73\xe4\xfb\x15\x89\xef\x49\x46\x61\xbd\x86\xe8\x03\x29\x28\x6c\x36\xbe\xcf\x8a\x8a\x0b\x09\x81\xef\x4d\xd2\x42\x4e\x7c\x6f\x92\xf3\x0c\x7f\xd5\xab\x32\x9e\xf8\xeb\x35\xb0\x14\xe8\x3f\x21\xfa\x44\x49\xf2\x9e\xc7\xf7\x30\x79\x20\x4c\x9e\xa6\x82\xd2\x09\x22\xe8\x9d\x33\x22\x79\xc1\x62\x7c\x51\xb2\x82\xaa\x17\x69\x99\x28\x11\xde\x24\x63\xf2\xae\xb9\x8d\x62\x5e\xcc\x6e\xee\x78\xc5\xd2\xd5\xac\x26\x82\x14\x64\xd2\x5f\xcc\x78\x4e\xca\x6c\x56\x09\x2e\xf9\x6d\x93\xea\x3f\x26\x3e\x82\x09\x52\x66\x14\xa2\xa5\x60\x49\x46\x6b\x2d\x18\x0d\xb9\xbe\xcf\xae\x89\xbc\x83\xcd\xc6\x95\x19\xfa\x7e\xcc\xcb\x5a\xd9\xf5\x99\x57\x2c\x06\xfc\x59\xc0\xc4\xb1\x7d\xe2\x7b\xd7\x44\x48\x26\x19\x2f\x61\x01\x67\xf8\x92\x5c\x55\x14\x62\x5e\x4a\xfa\x28\xa1\x96\xa2\x89\x25\xac\x7d\x2f\xe1\x25\xbd\xbc\x43\x88\xf8\x8e\x94\x66\x61\xbd\xd9\xa1\x97\xde\xdd\x4a\xfa\x37\x48\x26\x73\x94\x38\x0a\x60\x34\xf6\xe2\x9c\xd1\x52\xe2\x16\xed\x9a\xe8\x52\x3d\xf0\x3d\x34\xa4\x29\xa8\xe8\x16\xcc\x03\xdf\xab\x04\x4f\x9a\xd8\x59\xba\x59\x95\xf1\xb5\x79\xe8\xfb\xde\x2d\x91\xf1\xdd\xc7\x34\xad\xa9\x04\x56\xca\x57\xbf\xf8\xa3\x01\xa5\x8f\x71\xde\xd4\xec\xab\x09\x68\xc1\x13\x9a\x03\x9c\xa8\xdf\xbe\x97\xe3\x1e\x80\x13\x0c\x73\x74\xd5\x48\xfa\xa8\xd4\xce\x6b\xba\x8d\x54\x11\x41\xf2\x9c\xe6\x4f\x03\x7d\xfa\xfd\x09\xa8\x41\x96\x09\x4a\x12\x2a\x2e\x2e\xef\xd0\xdf\x89\x01\xb9\xe4\x65\x62\x97\x96\x63\x4b\xe4\x5d\x8d\x88\xac\xcc\x54\x02\xdc\x72\x9e\xdb\xfd\xf5\x05\xe8\x1f\x56\xca\x9f\x7f\x6a\x9f\x2e\xfb\x4f\x95\xea\x76\x67\x67\x8a\xfa\xb5\x1c\x3e\xf6\xbd\x07\xc1\x24\xad\x3f\xd1\x84\xeb\x40\x9f\x0c\x42\x76\x45\xeb\x9a\x64\xb4\x57\x1d\x5c\xc7\xa7\x93\xfb\xea\x17\xfb\x70\xc4\xa4\x8d\xef\xa7\x4d\x19\xc3\x07\xfa\x70\xa9\xf3\x34\xb8\x15\xfc\x9e\x8a\x1a\x4e\xfe\xf6\xf7\x5a\x0a\x56\x66\x53\x88\xd3\xcc\x95\x9d\xb2\x2c\x6c\xd3\x7a\xed\xdb\x64\x9b\x02\x15\x02\xe6\x0b\x9b\x3d\x88\xa9\x16\x82\x13\x83\xa9\x90\x42\xdf\xc3\xe8\x08\x01\x2f\x16\x50\xb2\x1c\x2b\xc2\xcb\x79\x16\x5d\x93\x92\xc5\x69\x30\x49\x09\xcb\x69\x02\x92\x43\x4d\x65\x53\xc1\x3d\x49\xef\x09\x68\x19\x73\x38\xaa\x27\x4a\x50\xe8\x7b\x9b\x2e\x9b\xc7\x64\x9b\xa5\xb7\x82\x17\x46\x0f\x8d\xf1\xad\x0a\x18\xbc\xa1\x0a\xb6\x6a\x46\x54\x70\xeb\xe7\x47\xa9\x61\xc5\x0d\xd4\xe8\x55\x67\xab\x8a\x96\x14\xfd\x85\x4a\xbd\x10\x28\xf6\x9a\x42\xcb\x54\x53\xab\xad\x5e\xff\x40\x1f\x68\xbd\x47\x33\xc1\x4a\xd9\xd3\x2c\xa3\x12\x72\x52\x4b\x30\x69\x97\x72\x01\x52\x31\xe4\xd1\x57\xa8\x5a\x3e\x3c\xfa\x3a\x99\xc2\x50\xb6\x76\x9f\xa3\xf6\xe9\xa9\xaf\x22\xaa\xf2\x0a\xb5\xd7\x7f\xa2\x74\x4d\x82\x73\x4c\xe9\x82\xdc\xd3\xa0\xc7\x7b\x53\x78\x19\x4e\x7d\x6f\x9c\x3e\x77\xf3\xe7\x7c\x2f\x94\x25\x52\xcf\x26\x1e\xb2\xad\xce\x73\x7c\xd8\x26\x43\x9b\x17\xf8\xb8\x0b\x4e\x1b\xa7\xa9\xef\x7b\xae\x91\x73\x70\x03\xe5\x2b\x59\x4f\x51\xa8\x26\x88\x39\x40\x49\x1f\xae\xf0\xcf\x00\x95\x54\x0c\x88\x7a\x1d\x77\x5c\xba\xde\x18\xed\x0f\xe0\xd3\x83\x50\x0d\xb1\xee\xc7\x1d\x90\xeb\x80\x5d\xe7\xa0\x90\x74\x49\x26\x41\x4f\x5b\x25\xb1\xcf\xb8\x4f\x6e\xef\x58\x58\x05\x05\xa4\x68\x68\x07\x53\x5f\xcc\x3d\xef\xcc\xf9\xbc\xb4\x9f\x35\xf9\xce\x5b\x9a\xed\x9b\xad\x39\x78\x7c\xd5\xf7\x1c\x2a\x76\xd3\x66\x07\x21\x4f\xe1\xe7\x9f\xfe\xf4\xea\xcf\xfd\x4c\xf2\x3d\x43\xc3\xad\x0c\xa5\x55\x8f\x9a\x9f\xb2\x5d\x9d\x5c\xb2\x11\xa5\xad\x8d\x96\xc0\x83\x18\x4e\xcc\xb3\x10\x6e\x24\xaf\x82\x10\xcb\x36\x8e\x4c\xb3\x71\x7e\xda\xe6\xf8\x7a\x33\xfe\x16\xc1\x30\x06\xdc\x39\xdf\x15\x04\x4b\x6d\x71\x2f\x16\x70\xfa\x52\x91\x81\x56\x42\xe9\xc3\x52\x88\x23\xb3\xe1\xb7\x85\xdd\x3a\xd8\x64\x77\x18\x33\xa3\xf7\x11\x26\x4e\x10\xfa\x1e\x12\x46\xfb\xfe\xb9\xfb\xfa\xf0\x9d\xdf\x51\xbb\x70\x07\xdc\x97\x32\xd7\x80\xa3\x96\x5d\xa0\x65\xef\x49\x6d\x59\xd0\xb8\x46\x1b\x1c\x47\x4e\x41\xee\x00\x68\xaa\x84\x48\xfa\x9e\xf3\x2a\xd0\x89\x00\xe7\xa7\xfb\x12\x20\x54\xc7\xe2\x01\xdd\xae\x73\xc2\xcf\x17\x87\x27\x56\x3f\xaf\xd0\x87\x6b\x2b\x8e\x0b\x08\x76\x91\x49\x38\x5c\x6a\x09\x21\xd4\x85\x8b\x48\x45\x9d\xa1\x2e\x9a\x4a\x8d\xb5\x18\x0f\x8f\x54\x55\xbe\xd2\x2e\x0f\x8a\x1a\xdb\x82\x48\x15\xcd\x14\xe2\xd0\xf7\x30\x2e\x07\x13\x84\x82\x7d\x4d\x73\xb2\x42\x51\x67\x70\x02\xd8\xe6\x47\x37\x34\xc6\xa6\xc4\x56\xa3\x3a\x03\xb4\x8c\x8b\xae\x9e\xf1\xe9\x71\x1c\xd9\x6a\x47\x34\xc2\x24\xd5\xe7\x5d\xd4\xa7\x1e\xdf\xd3\xf9\xe9\x34\x6e\xca\x14\x0d\xdf\xa2\x2f\xf1\x99\x85\x77\xd1\xd5\x82\x81\xef\xd0\x97\x1d\xba\x2a\x6b\xbd\xc1\x49\x6a\x14\xaa\x27\x98\xe8\x3d\x27\xc9\x3b\x6c\xfe\x02\x03\x19\xe2\xa1\x7a\xa6\xd5\x30\x2f\xda\xcc\xf6\x36\x2e\x58\x9b\xd2\x26\x2e\x39\x2d\x83\x2e\x5d\x42\xf8\xcd\xa2\xa8\x58\xf0\x7b\xb4\xff\xfc\xb4\xdb\x81\x4b\x98\x0f\xf7\x7a\xd7\x76\xf8\xdc\xe0\x29\xd1\xca\x98\x11\x34\x6d\xd0\x0b\x8b\x64\xeb\xda\xdb\xf4\x78\x11\x29\xa6\xa8\x33\xdf\xf3\x6a\x49\x84\x3a\xc0\x55\x50\x3f\xf0\x07\x65\xdc\x5e\xf9\xa6\xee\xb1\x06\xea\xcc\x34\x23\xfd\x3c\xf9\x7f\x03\x77\xc3\xca\x98\x06\x4a\x44\xeb\x1a\x67\xdb\x39\xbc\x3c\x3b\x51\x1b\xaf\x58\x9e\xb3\x5a\x65\x14\x1c\x1f\x3b\xee\xd3\xae\xeb\x3d\xd2\x1e\x3d\xd7\xd5\xb5\xd3\xab\xc6\xa3\xad\x23\x3a\x4f\x28\x57\x8c\xfa\x62\x87\x33\x9e\x88\x86\x25\xdc\xbe\x37\x9e\x74\x87\x09\x61\x2f\xdf\x17\xf0\xc2\xfd\xec\x10\x2b\x58\xb6\x1e\x21\xdb\xa5\xe0\x24\x89\x49\xad\xf2\xd2\xe9\x86\xba\xa3\x63\x60\xc0\x6e\xc6\x2a\xcc\x3c\x33\x05\x97\x51\xd7\xbe\x3f\x9b\xf5\x9a\x4a\x05\x88\x1a\x17\xfa\x4d\x78\x60\xf2\xce\x1e\x08\xaa\x81\xec\x9c\x11\xda\xc9\xf3\x7b\xd8\x2e\x8e\xb0\xc0\xda\xa2\x4d\x68\x4a\xf1\x2c\x52\x0f\xdb\xe2\x33\x8f\xd1\x64\x7d\x6c\xb8\xee\xeb\x45\x67\xaf\x0b\x37\x41\xe8\x4e\x69\x5a\xf9\x68\x89\x07\x8f\xd2\x85\xa5\x0e\x18\x9c\x43\xef\x50\x52\x62\xd5\xe7\x2f\xea\x1c\xd2\x7d\x89\xce\x1a\xc4\x6e\x49\xd7\x81\x58\x2c\x9e\x85\xa1\x97\xde\xb2\x92\xe4\xec\x5f\x76\xb1\xc3\xc6\x97\x9b\x51\xd9\xed\xc4\x8d\x56\x8c\x6d\xe9\xac\xde\xec\xb8\x79\xd9\x3e\x6e\x6f\xd5\xe2\x48\xcb\x1e\xe8\x83\x35\x8e\xb6\x4e\x74\xdf\x4c\xd1\x53\xc0\x63\xa6\x3b\x0b\xd0\xf9\x15\x2b\x3e\x76\xfc\x82\xbb\xa2\x8c\xca\x6b\xfb\x54\xb5\x21\x82\x52\xb5\xb5\x1b\x8c\xec\x08\x15\xd9\x06\xdf\xa6\x76\x3b\xc0\x04\xce\xf5\x4f\x64\xa6\x9b\xb3\x29\xb4\xe2\xbe\x75\xc2\xb3\xf8\x5b\x23\x9e\x5b\x2e\xaa\xe4\xb1\x5c\xb4\xb3\x9c\x11\x2b\xec\x5a\x02\xaf\xa6\x39\x8d\x4d\x3f\x45\x6a\x6a\x8d\x3a\x3f\x6d\x85\x44\x6f\x84\xe0\xa2\x0e\xc2\x39\x32\xcc\x70\xca\x6b\x04\x85\x54\xf0\x62\xcf\x0c\x6c\xa1\x4d\xdf\xe0\x42\x1b\x0e\x50\xe0\xb3\xd9\x00\x5e\xd0\x98\xd1\xaf\x34\x39\xb0\xde\x3d\xcf\x8b\x63\x14\xe0\x3a\x7d\x24\x45\xac\xcc\xb5\xa2\x64\x63\xaf\xba\xf9\x8b\xbe\x94\x05\x11\xf5\x1d\x51\xc9\x19\xfd\x95\xe4\x0d\x9d\xc2\x71\xac\x29\x77\x3b\x52\x5a\xdd\xb7\x44\x92\xbc\x17\xab\xc6\xc2\x18\xa7\x14\x44\xeb\x7f\x54\xcf\x8e\x92\x79\x6f\xd6\xed\x2c\xb0\x61\x34\x14\xed\xd5\x0f\x0c\x6b\xff\x51\xa5\x58\x8c\x13\xfa\x6e\x5b\x82\x30\x0a\xe4\xaa\x32\x5d\xa5\xe7\xad\xd7\xff\x67\x82\x3e\x5f\x40\xa4\x1a\x2a\x67\xf8\x35\x2f\x21\x94\x99\x80\x75\x7c\x4e\xd6\x6b\x30\xef\xb9\xfe\xeb\x3d\xda\x76\xe3\x3f\x50\x2d\x77\x68\x56\x8e\x31\xce\xc2\x53\x4d\x90\xb2\xce\x89\xa4\xbb\xa1\x06\x08\x41\xdc\x1e\x76\xae\x7b\x3a\x27\xf4\xea\x3d\xfc\x75\x3b\x2c\x3b\xe2\xd2\xaa\x62\xe3\x62\xf2\xca\x55\x6b\x76\xf4\xd5\xe4\xee\x58\x68\x3c\xeb\xca\x6e\x64\xd3\xbe\x2b\x59\xae\x0d\xaf\xb0\x72\x83\xb4\x90\xd1\x4d\x65\xf2\xd8\x5e\x58\x58\x71\xac\x06\x5a\x54\x72\x35\x09\x75\xd6\x26\x34\x25\x4d\x2e\x77\xbe\xdf\x94\xf4\xb1\xa2\xb1\x44\x23\x56\x15\x85\xa3\xcf\xc0\x4a\xe0\x25\xe5\xe9\x64\x0a\x8f\x61\x97\x34\xe6\xfc\x75\xf4\x1b\x1b\xfd\x88\x90\x86\x26\x47\xe9\xc2\xaa\xdb\xe7\x0b\xd3\xe7\x3f\x6f\x06\xc9\x38\xc4\xd1\xd6\x68\x84\x70\xcf\xa3\xd1\x8e\x3a\xcf\x7e\x34\x65\xee\xb8\x13\x52\x9a\xef\x39\x65\xfc\x91\xf1\xea\x8f\xc3\xa5\x6d\xab\x6a\xdb\x54\x2b\xf6\xfc\xd4\xde\x17\xf4\x0d\x08\x26\xac\x94\x54\x88\xa6\x92\x98\xde\x09\x95\x2a\x5f\x27\x61\x9f\x79\x7a\x2e\xf6\xda\xbb\x87\xb1\xaf\x2e\xfa\xd7\x11\xbd\xa2\xeb\xd1\x4b\x67\xff\x65\xce\x6b\x1a\x8c\xd1\xc1\x78\x7a\xc4\xb8\x7f\x6f\x7a\x98\x72\x57\x1b\xdb\xdc\xed\x49\x77\x93\xf6\x3b\xc4\x8f\xde\x1c\x1b\xe9\xae\x30\x7b\x65\xf8\x7d\xb6\x8e\xdd\x0f\x8f\x08\x33\x57\xc3\xdf\x65\xd7\xf6\x95\xbc\x11\xe4\x8e\x88\x3b\x6e\x9b\x74\x73\x06\x81\x1d\x0e\x74\x87\x6d\xfb\xbb\x03\xaf\x8b\xb6\x5b\xdc\x6f\xbb\x35\x3a\xe4\x7b\xac\xc1\xb8\x60\xef\xe1\xda\x3b\x10\x77\x70\x38\xf4\x2b\x2d\xf3\xd2\xa7\x27\x40\x3f\x3d\x85\x3a\xb8\x5f\x31\x77\x0f\x17\x89\xb9\x7a\x70\xae\x4b\xa6\xf0\x32\xdc\xb7\x61\xa9\x36\xf8\xa3\xd7\x26\x7b\xdf\x3a\x45\x5c\x6f\x78\x45\x12\xdd\xb0\xac\x24\xb9\x9a\x79\xfb\xc6\x5d\x4c\xdd\xa1\x6a\xbf\xca\x1a\xdb\x1b\xde\xee\xb8\xe0\x1b\xdd\x21\x3f\x0d\xb3\x07\xa4\xaf\xe0\xb2\xa7\xe0\xf7\xd9\xbe\xd9\x1a\x83\x7a\xe3\x9f\xaa\x8e\xb1\xe1\x6c\xcf\x54\xad\x6e\xb0\x74\xf1\x84\x58\x7c\xfa\x90\x1a\xb4\xc8\xe3\x6d\xf1\xa1\x4d\xf1\xf6\x49\x6c\x3c\x84\xfd\x8b\x3a\xea\x7e\x5c\x5f\x8c\xc1\xfb\xf6\x9e\x78\x4f\xf7\xdb\xf5\xbe\xcf\x69\x71\x8d\xa1\xc3\x98\x0c\xdb\xd3\x67\xf4\xb1\xfd\x2b\x5b\xb7\xab\x7c\x76\x4f\xe9\x74\x94\xdf\xd6\x4f\x8e\x75\x91\xcd\xff\x32\xef\xbf\x29\xf3\x9a\x3f\x64\xd2\xf9\xbb\xdd\xb5\xdd\x21\xe4\x3c\x1b\x5a\x94\xf3\xec\x0a\x73\x73\xf0\x3c\x84\x40\xfd\x83\xc5\x54\x7f\x6d\x35\xd5\x59\xb9\x3d\x04\x6d\x23\xea\xdc\xd0\xb0\xb6\x3f\xfe\x15\x5d\xa5\x28\x5c\x7d\xd5\xb0\x2f\x80\x98\x99\x7b\xd6\xe7\xfb\xdf\x1e\x86\x7f\x6d\x1a\xe1\x5e\x4a\x18\xe5\xa6\x78\xc6\x4d\xcd\x37\xfd\x2b\x49\xeb\x76\xb2\xd2\xc5\x74\x65\x4a\x49\x2b\xbe\xaf\x84\xce\xd4\xa4\x35\x5e\x48\x35\x15\x4c\xdd\x00\x42\x4c\x84\x04\xe3\x05\x53\x4e\xa6\x90\xba\xaa\x31\x53\xca\xb1\x61\x0a\xfb\x9f\x0e\xc6\x3c\x14\xa9\x8a\x6e\x6e\x6a\xcf\xf7\x3c\x55\xe4\x73\xfb\x3f\x07\xcb\x95\xa4\x6f\xca\x98\x27\x54\x04\xca\xa6\xc1\x57\x9c\x5d\x43\x7c\x43\xcb\xc4\x96\x5f\x51\x67\x61\x8f\xbf\xfe\x13\x00\x00\xff\xff\xbd\x34\x57\xa1\xb3\x26\x00\x00")

func contextGoTplBytes() ([]byte, error) {
	return bindataRead(
		_contextGoTpl,
		"context.go.tpl",
	)
}

func contextGoTpl() (*asset, error) {
	bytes, err := contextGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.go.tpl", size: 9907, mode: os.FileMode(436), modTime: time.Unix(1566812310, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.go.tpl": contextGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}
var _bintree = &bintree{nil, map[string]*bintree{
	"context.go.tpl": &bintree{contextGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}

