// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// context.go.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x59\x5d\x6f\xdc\xb8\xd5\xbe\x16\x7f\xc5\xc9\xe0\xb5\x21\xf9\x1d\x6b\x9c\xdd\x45\x5a\x4c\xe3\x05\x3c\x4e\x76\x11\xc0\x76\x02\x3b\xe9\x5e\x14\x45\x41\x53\x94\x4c\x58\x12\xa7\x24\x15\x7b\x3a\x9d\xff\x5e\xf0\x4b\xa2\x64\xcd\x8c\x37\x0e\x8a\xa2\xa8\x6f\x6c\xf3\xe3\x39\x1f\x3c\xe7\x39\x87\xd4\x6c\x06\xe7\x3c\xa3\x50\xd0\x9a\x0a\xac\x68\x06\xb7\x2b\x90\xac\xba\xc5\x29\xbc\xfb\x08\x57\x1f\x3f\xc3\xfb\x77\x1f\x3e\xa7\x08\x2d\x31\xb9\xc7\x05\x85\xf5\x1a\xd2\x2b\x5c\x51\xd8\x6c\x10\x62\xd5\x92\x0b\x05\x31\x8a\x26\x79\xa5\x26\x28\x9a\x94\xbc\xd0\xbf\xe4\xaa\x26\x13\xb4\x5e\x03\xcb\x81\xfe\x1d\xd2\x0b\x4e\xee\x61\xf2\x80\x99\x3a\xce\x05\xa5\x13\xbd\xdb\xae\x9a\x61\xc5\x2b\x46\xf4\x26\xc5\x2a\x6a\x36\xd1\x3a\x33\xf0\xd1\xa4\x60\xea\xae\xb9\x4d\x09\xaf\x66\x05\x2f\x71\x5d\xcc\x96\x82\x2b\x7e\xdb\xe4\xf6\x8f\x49\x7f\xcd\xcd\x1d\x5f\xb2\x7c\x35\x93\x58\xe0\x0a\x4f\x50\x82\x10\xe1\xb5\x34\x1a\x7e\xe6\x4b\x46\x40\xff\x9c\xc2\x24\xb0\x62\x82\xa2\x4f\x58\x28\xa6\x18\xaf\xe1\x14\x4e\xf4\x26\xb5\x5a\x52\x20\xbc\x56\xf4\x51\x81\x54\xa2\x21\x0a\xd6\x28\xca\x78\x4d\xcf\xef\x34\x04\xb9\xc3\xb5\x9b\x58\x6f\x50\x44\x4a\x46\x6b\xa5\x27\xac\xe4\xf4\xdc\x0c\xa0\x48\x4b\x6f\x2a\x2a\xba\x09\x37\x80\xa2\xa5\xe0\x59\x43\x82\xa9\x9b\x55\x4d\x3e\xb9\x41\x14\x2d\x5b\x9d\xdc\x74\xab\x64\x0b\x81\xa2\x5b\xac\xc8\xdd\xc7\x3c\x97\x54\x01\xab\xd5\x9b\x9f\xd0\x13\x9f\xd3\x47\x52\x36\x92\x7d\x75\x3e\xaf\x78\x46\x4b\x80\x23\xf3\x1b\x45\xa5\x5e\x03\x70\xa4\x4f\x22\xbd\x6c\x14\x7d\x44\xd1\x83\x60\x8a\x4a\x6b\xe2\xd1\x40\xed\x4b\x2a\x25\x2e\xa8\x39\xa4\x52\xd2\xbe\xa8\x25\x16\xb8\x2c\x69\xb9\x5f\xd2\xf5\x6f\x2f\x95\x35\x08\x25\x41\x71\x46\xc5\xd9\xf9\x1d\xae\x0b\x9a\x39\x29\xe7\xbc\xce\xfc\xd4\x62\x6c\x0a\x7f\x90\xd7\x14\x67\xac\x2e\x4c\x5c\xdc\x72\x5e\xfa\xf5\xf2\x0c\xec\x0f\xab\xd5\x8f\x3f\xb4\xa3\x8b\xfe\xa8\xb1\xcd\xaf\xec\x6c\x35\xbf\x16\xc3\xe1\xd6\xda\x36\x80\xb6\x59\xec\x16\x5e\xd3\x8c\xef\x77\x8d\xcf\x15\x6e\xc3\xa0\x53\xf0\xcd\x4f\x7e\x70\xc4\xf6\x0d\x42\x79\x53\x13\xb8\xa2\x0f\xe7\x36\xce\xe3\x5b\xc1\xef\xa9\x90\x70\xf4\x97\xbf\x4a\x25\x58\x5d\x4c\x81\xe4\x45\x28\x3b\x67\x45\xd2\xa6\xc5\x1a\xf9\xb8\x9f\x02\x15\x02\xe6\xa7\x3e\x52\x35\xa6\x99\x88\x8f\x1c\xa6\x41\x4a\x50\xa4\x8f\x50\x08\x78\x75\x0a\x35\x2b\x75\x46\x45\x25\x2f\xd2\x4f\xb8\x66\x24\x8f\x27\x39\x66\x25\xcd\x40\x71\x90\x54\x35\x4b\xb8\xc7\xf9\x3d\x06\x2b\x63\x0e\x07\x72\x62\x04\x25\x28\xda\x74\x89\x35\x26\xdb\x4d\xfd\x22\x78\xe5\xf4\xb0\x18\xdf\xaa\x80\xc3\x1b\xaa\xe0\x13\x78\x44\x85\x30\x95\xbf\x97\x1a\x5e\xdc\x13\x35\x3c\x2f\xb4\x7a\x78\x85\x7d\xb8\xb4\xcc\x11\x1b\x0e\x9c\xc2\xc9\x14\x4e\xbe\x55\x0b\x8f\x35\x50\xa3\xc7\x45\x9d\x26\xc6\xe0\xf4\x57\xaa\xec\x84\x57\xe0\x53\xa7\xb3\x73\x9a\x9d\xbf\xa2\x0f\x54\xee\x70\x90\x60\xb5\xea\xa9\x56\x50\x05\x25\x96\x0a\x5c\xf4\xe7\x5c\x80\x32\x44\x7f\xf0\xb5\xd3\x15\x0e\xbe\x4e\xa6\x30\x94\x6d\xdd\x17\xa8\x7d\x7c\x8c\x4c\x60\x99\xf0\xb6\x7e\xd4\x7f\x6a\xe9\x96\xf9\xe7\x3a\xb3\x2a\x7c\x4f\xe3\x1e\xff\x4f\xe1\x75\x32\x45\x51\xe4\x23\x55\xa7\xb7\x4d\x0c\x3d\xd8\x46\x4f\x7b\x2e\x7a\xb8\x3b\xcd\xf6\x60\xcd\x70\xe7\xde\xee\x5c\x11\x8a\x42\x35\xe7\x10\xba\x1a\xa1\x68\x0f\xe5\x5b\x3a\x9a\x03\xd4\xf4\xe1\x52\xff\x19\x1b\x6d\x35\x21\x6b\x5d\x0f\x3b\xee\x5f\x6f\xf4\x84\x25\x9f\x79\x60\xe8\x16\xfa\x99\xc2\x8f\x3f\xfc\xe1\xcd\x1f\x35\xda\x33\xea\xc1\xb3\xd4\x70\x85\xe1\x3b\x2b\x32\x28\x16\x83\x6a\x31\x07\x23\xda\x32\x47\x16\xf7\xfc\x61\x54\xec\x57\x90\xbd\xcb\xbb\xaa\x62\x42\x01\x94\x68\x68\x07\x23\xcf\xe6\x51\x74\x12\xfc\xbf\xf0\xff\xdb\x62\x32\x6f\xcb\x46\xdf\x4f\xb6\xa6\x8c\xcf\x06\xbe\xea\x47\xe8\x7e\x7f\x05\xa5\xe6\xf7\x3b\xda\x97\x1e\x57\x66\x5a\xe5\x8c\x39\xbd\xd2\xb3\xcf\x69\xa6\x84\xab\x46\xd4\x3e\xe9\xda\x02\x15\x13\x38\x72\x63\x09\xdc\x28\xbe\x8c\x13\xcd\x07\x24\x75\xcd\xd8\xdb\xe3\x36\x0f\xd7\x9b\xf1\x5d\x58\x9f\x7f\xcc\x83\x36\xc9\x40\xb0\x1c\x48\xea\x46\x7f\x3e\xf5\x0c\xb2\x36\x27\xa3\x55\xb1\x75\x26\xed\xd9\x91\x5e\x98\x90\x8a\x13\x14\x69\xaa\x69\xf7\xbf\x0d\xb7\x0f\xf7\xfc\xa6\xc5\x27\x5b\xe0\xbe\xd4\xa5\x05\x1c\x55\xfd\x4c\xab\x7e\x81\xa5\xe7\x4f\x67\xfb\x33\x75\x22\x69\xd8\x20\x7e\x67\xd5\x9a\x65\x86\x15\xbd\xe0\xee\x44\xac\xf0\xb5\x67\x23\x2e\x20\x1e\x63\xa4\x24\x1c\x6e\x09\x22\xb1\x79\xa9\x11\x2a\x59\x68\xee\x15\x5a\x09\x20\xa9\x6b\x99\xb4\xee\x11\x5e\x2e\xcb\x95\x55\x2f\xae\xa4\x6e\x4f\x52\x93\x15\x53\x20\x09\x8a\xb4\x0d\xcf\xca\x7e\x03\xf9\x8e\x96\x78\xa5\x05\x9d\xc0\x11\xe8\x8b\x47\x7a\x43\x89\x6e\x8c\x7c\xaa\x99\x02\x60\xf1\xcf\xba\x64\xd5\xa3\x87\x24\xf5\xa9\xac\xd1\x30\x53\xd4\x16\xbb\xb4\xcf\x2b\x28\xb2\x21\x16\x74\x99\xc6\x0c\x0b\xdf\xa2\x2f\xf4\x98\x87\x0f\xd1\xcd\x84\x83\xef\xd0\x17\x1d\xba\x49\x3d\xbb\x20\x88\x01\x2d\xd4\xde\xa9\xd2\x0b\x8e\xb3\x0f\xba\x53\x8d\x1d\x64\xa2\x2b\xea\x89\x55\xc3\x6d\xf4\x11\x10\x6d\x42\xb0\xf6\xe8\xdd\xa9\x94\xb4\x8e\xfd\x61\x68\xae\x48\xe0\x67\x8f\x63\x4e\x82\xdf\x6b\x0f\xbc\x3d\x0e\xd7\xe8\x49\x1d\x09\xf7\x76\xdd\xd3\xe3\x0b\x0f\xcf\x88\x37\x06\x8d\xe2\x59\xb3\x5e\x79\x2c\x9f\xa0\x66\x57\x28\x53\xd3\x41\x25\x0b\x14\x45\x52\x61\x61\xaa\xb8\x39\xdc\x2b\xfe\x60\x8c\xdc\xa9\x83\xcb\x9b\xf9\xa9\x86\x70\x1d\x49\x3f\x5e\xfe\xdf\xc1\xdd\xb0\x9a\xd0\xd8\x88\x68\x5d\x14\x2c\x7b\x0b\xaf\x4f\x8e\xcc\xc2\x4b\x56\x96\x4c\x9a\xc8\x82\xc3\xc3\x9e\x1b\xad\x0b\x07\x83\xd6\xb7\x6f\x2d\xcd\xee\xf0\xaf\xf3\x6d\xeb\x90\xce\x23\xc6\x25\x5b\x7c\xb2\xc5\x29\x7b\x4e\xc6\xb9\x65\xe0\x95\xbd\x6e\x71\xc7\xd9\x8b\xff\x53\x78\x15\xfe\x1f\x10\x12\x78\x02\x1e\x21\xa9\x85\xe0\x38\x23\x58\x9a\x38\xed\xea\x4e\xd4\xd1\xfd\xc0\x80\xed\xe5\xab\x72\x97\xb1\x29\x84\x54\xb6\x46\x68\x36\xeb\x75\x98\x06\x50\x6b\x5c\xd9\x9d\xf0\xc0\xd4\x9d\xe7\x78\xd3\x4d\x76\xce\x48\xfc\xa5\xfb\x5b\x38\x8f\xa4\x3a\xd1\xda\xe4\xcd\x68\x4e\x35\x85\x9b\xc1\x36\x09\xdd\xb0\x36\xd5\x56\x80\xd0\x6d\xbd\x53\xd9\xe9\xba\x4d\x9c\x84\x37\x46\xab\x74\xba\xd0\x25\xc2\xe8\xc2\xf2\x00\x6c\xb4\x7c\x98\xff\xbf\x18\xe2\xb7\xcd\x87\x8d\x16\x8d\xdd\x12\x6f\x00\x71\x7a\xfa\xbb\x30\xec\xd4\x2f\xac\xc6\x25\xfb\x87\x9f\xec\xb0\xf5\xe6\x66\x54\x76\xfb\x44\xa0\xad\x18\x5b\xd2\x59\xbd\xa5\xad\xc0\x42\xb9\x2a\x16\x46\x81\x89\x64\x1d\x05\xfe\x52\xd0\xdd\x23\x74\xda\x17\x1c\x48\x1a\x96\xc1\xae\x08\x46\x92\x96\x94\xb8\x9a\x8b\x25\xf5\x17\x22\x9d\xc1\x6d\x63\x9f\xbe\x17\x82\x0b\x19\x27\x73\x9d\x4f\xc3\x0b\x4e\x23\x28\xe4\x82\x57\x3b\x6e\xa1\x1e\xdc\xd5\xcc\x3e\xb8\x8b\x79\x03\x3f\x9b\x0d\x04\x08\x4a\x18\xfd\x4a\xb3\xe7\xc5\x77\x40\x28\x9e\x4c\xbc\x68\x2d\xd3\x5d\x8e\xcc\xb2\x92\x4b\xda\x51\x5c\xcf\xae\x78\xc2\x6a\x45\x85\x68\x96\x0a\x98\x84\x8c\x2a\x4a\x14\xcd\x26\x89\x23\x33\x7f\x67\x0c\x6c\x38\x37\x70\xc9\x9f\x86\x97\xc1\x6d\x37\x55\x23\x7e\xe7\x4d\xd5\xf1\x63\x28\xae\xbb\x2e\xbf\x40\xda\xe8\x23\xc1\x88\x30\x7f\xd9\x7b\x99\x69\x63\x4f\x01\x63\x96\xd9\xeb\xf7\x8b\xec\x7a\xfa\xfa\xe2\x04\x85\x35\x78\x4b\x5e\xe9\xae\x23\x4e\x20\xf6\x9c\x6b\x09\xcc\xe6\xd9\xbf\xbd\x89\xdd\xf7\x32\x3a\x60\x62\x7f\x1d\x69\x5b\xcc\x90\x93\x9f\xf3\xfe\xe9\x36\x5c\xef\x01\xbc\xde\x85\x38\x68\x5d\x5d\x5b\x77\x96\xb9\xae\x2e\xe8\x44\xa7\xf0\x3a\xd9\xb5\x60\x61\x16\xa0\xd1\x8e\x74\xe7\xae\x63\x8d\x1b\x0d\xbb\xcf\xf4\x86\x15\x35\x2e\x4d\xfb\xd0\x37\xec\x6c\x1a\xd6\xa9\xdd\x2a\x5b\xec\x68\xd8\x38\x87\xe0\x1b\xfb\xb8\xb4\x1f\x66\x07\x48\x5f\xc1\x45\x4f\xc1\x97\xd9\xbe\xe9\x57\x96\x61\x45\x35\x19\x31\x56\xef\x76\x34\x28\xe6\x72\x60\x13\x26\xd1\x09\x67\xeb\x09\x21\x3a\xa3\xdb\xaf\x16\xff\x04\xc5\x54\xa9\xeb\x9d\x67\xf9\xf5\x06\x45\x2e\xef\xcd\x87\x91\xf4\x4b\x5d\x61\x21\xef\xb0\x91\x97\xfe\x19\x97\x0d\x9d\xc2\x21\x21\xa3\x8f\x6b\xce\x43\x79\xa5\x6c\x4d\xea\xd1\x41\xe3\x91\x1c\x25\x54\xd8\x96\x8c\x03\x39\x3b\xc8\xe6\xbd\xb7\xb5\xae\x68\x84\x2f\x83\xf2\x81\x69\x87\x3c\x1a\x52\x22\xe9\xaf\x54\x6d\x37\x24\x4e\xd2\x58\xad\x96\xd4\x92\xc4\x7a\xed\x2e\x82\xbe\x9a\xe9\x4d\xd2\xa6\x97\xae\x3e\x47\xeb\x35\xfc\xdf\x36\x97\xfc\x4d\x4b\x09\xc6\xe7\x9d\xa1\xc3\x33\x19\xac\x8c\x5d\x8a\x86\xe6\x74\x8a\x87\x0b\x93\xa4\xff\x12\x62\xb4\xaa\x59\x39\x37\x6f\x79\x35\x23\xb1\xf6\xe9\xcd\xd2\x95\x5d\xdf\x47\xf8\xaa\xcb\x24\xd0\x6a\xa9\x56\x93\x44\xe7\x66\x46\x73\xdc\x94\x6a\xcb\xde\xa6\xa6\x8f\x4b\x53\x31\xc1\x7c\x9e\x3a\xf8\x0c\xac\x06\x5e\x53\x9e\x4f\xa6\xf0\x98\x24\x96\x86\x03\x6d\x4c\xf8\x35\xff\x8b\xbc\xff\xa4\xc8\x6b\xfe\x2b\x83\x0e\x6d\x77\xd7\xd3\xae\xa0\xe4\xc5\xd0\xa2\x92\x17\x97\x3a\x36\x07\xe3\x09\xc4\xe6\x43\xdb\xd4\xbe\xda\x4d\x6d\x54\xba\xfe\xc1\x90\xb1\x79\x8f\xd9\x75\x14\x3a\xc6\x76\xcc\xcf\x77\xef\x1e\x1e\xa4\x29\x69\xc3\xc3\x05\xab\xfd\x54\x57\xab\xa9\xfb\x16\xb2\x52\x54\xb6\x5f\x41\x6c\x5a\x5c\xba\xa4\xb0\x8a\xef\x4a\x86\x13\xf3\x85\x66\x3c\x25\x24\x15\xcc\x5c\x8f\x80\xe8\xab\xbc\xf3\x82\x4b\x0c\x97\x12\x5d\xfc\xbb\x8b\xc1\xa1\xff\x84\xec\xfa\x46\x67\x9e\x16\x69\xd2\x67\xee\xb2\x08\x45\x91\x49\xd7\xb9\xff\x2a\xb3\x58\x29\xfa\xbe\x26\x3c\xa3\x22\x36\x36\x0d\xde\x6a\xbb\x76\xf6\x86\xd6\x99\x4f\xa4\x4a\x16\x49\x8f\x89\xfe\x15\x00\x00\xff\xff\x6e\x50\x86\x3d\x66\x20\x00\x00")

func contextGoTplBytes() ([]byte, error) {
	return bindataRead(
		_contextGoTpl,
		"context.go.tpl",
	)
}

func contextGoTpl() (*asset, error) {
	bytes, err := contextGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.go.tpl", size: 8294, mode: os.FileMode(420), modTime: time.Unix(1566650718, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.go.tpl": contextGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.go.tpl": &bintree{contextGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
