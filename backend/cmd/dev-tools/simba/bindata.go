// Package main Code generated by go-bindata. (@generated) DO NOT EDIT.
// sources:
// context.go.tpl
package main

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

// Name return file name
func (fi bindataFileInfo) Name() string {
	return fi.name
}

// Size return file size
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}

// Mode return file mode
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}

// ModTime return file modify time
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}

// IsDir return file whether a directory
func (fi bindataFileInfo) IsDir() bool {
	return fi.mode&os.ModeDir != 0
}

// Sys return file is sys mode
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x6d\x6f\xdb\xba\xf5\x7f\x2d\x7e\x8a\x53\xe3\x9f\x40\xca\xdf\x91\xd3\x7b\x2f\xba\xc1\x4b\x2e\x10\xa7\xed\x50\xa0\x69\x83\xa6\xdd\x7d\x31\x0c\x03\x23\xd1\x0a\x11\x49\xd4\x28\xaa\x89\xe7\xf9\xbb\x0f\x87\x0f\x12\x25\xcb\x4e\xd2\x16\xc3\x70\xb1\xbc\x49\x4c\x51\xbf\xf3\xfc\xe3\x39\x74\x66\x33\xb8\x10\x29\x83\x8c\x95\x4c\x52\xc5\x52\xb8\x59\x41\xcd\x8b\x1b\x1a\xc3\xeb\x8f\xf0\xe1\xe3\x67\x78\xf3\xfa\xdd\xe7\x98\x90\x8a\x26\x77\x34\x63\xb0\x5e\x43\xfc\x81\x16\x0c\x36\x1b\x42\x78\x51\x09\xa9\x20\x24\xc1\x64\x59\xa8\x09\x09\x26\xb9\xc8\xf0\x57\xbd\x2a\x93\x09\x59\xaf\x81\x2f\x81\xfd\x03\xe2\x4f\x8c\xa6\xef\x45\x72\x07\x93\x7b\xca\xd5\xf1\x52\x32\x36\x41\x04\xb3\x73\x46\x95\x28\x78\x82\x2f\x2a\x5e\x30\xfd\x22\x2b\x53\x2d\x22\x98\x64\x5c\xdd\x36\x37\x71\x22\x8a\xd9\xf5\xad\xa8\xf8\x72\x35\xab\xa9\xa4\x05\x9d\xf4\x1f\x66\x22\xa7\x65\x36\xab\xa4\x50\xe2\xa6\x59\x9a\x3f\x26\x04\xc1\x24\x2d\x33\x06\xf1\x42\xf2\x34\x63\xb5\x11\x8c\x86\x5c\xdd\x65\x57\x54\xdd\xc2\x66\xe3\xcb\x8c\x08\x49\x44\x59\x6b\xbb\x3e\x8b\x8a\x27\x80\x3f\x67\x30\xf1\x6c\x9f\x90\xe0\x8a\x4a\xc5\x15\x17\x25\x9c\xc1\x09\xbe\xa4\x56\x15\x83\x44\x94\x8a\x3d\x28\xa8\x95\x6c\x12\x05\x6b\x12\xa4\xa2\x64\x17\xb7\x08\x91\xdc\xd2\xd2\x3e\x58\x6f\x76\xe8\x65\x76\xb7\x92\xfe\x05\x8a\xab\x1c\x25\x8e\x02\x58\x8d\x83\x24\xe7\xac\x54\xb8\xc5\xb8\x26\xbe\xd0\x0b\x24\x40\x43\x9a\x82\xc9\xee\x81\x5d\x20\x41\x25\x45\xda\x24\xde\xa3\xeb\x55\x99\x5c\xd9\x45\x42\x82\x1b\xaa\x92\xdb\x8f\xcb\x65\xcd\x14\xf0\x52\xbd\xfa\x85\x8c\x06\x94\x3d\x24\x79\x53\xf3\xaf\x36\xa0\x85\x48\x59\x0e\x70\xa4\x7f\x93\x20\xc7\x3d\x00\x47\x18\xe6\xf8\xb2\x51\xec\x41\xab\x9d\xd7\x6c\x1b\xa9\xa2\x92\xe6\x39\xcb\x1f\x07\xfa\xf4\xdb\x23\x50\x83\x2c\x93\x8c\xa6\x4c\x9e\x5f\xdc\xa2\xbf\x53\x0b\x72\x21\xca\xd4\x3d\x5a\x8c\x3d\xa2\xef\x6a\x44\xe4\x65\xa6\x13\xe0\x46\x88\xdc\xed\xaf\xcf\xc1\xfc\xf0\x52\xfd\xfc\x53\xbb\xba\xe8\xaf\x6a\xd5\xdd\xce\xce\x14\xfd\x6b\x31\x5c\x26\xc1\xbd\xe4\x8a\xd5\x9f\x58\x2a\x4c\xa0\x8f\x06\x21\xbb\x64\x75\x4d\x33\xd6\xab\x0e\x61\xe2\xd3\xc9\x7d\xf5\x8b\x5b\x1c\x31\x69\x43\xc8\xb2\x29\x13\xf8\xc0\xee\x2f\x4c\x9e\x86\x37\x52\xdc\x31\x59\xc3\xd1\x5f\xff\x56\x2b\xc9\xcb\x6c\x0a\xc9\x32\xf3\x65\x2f\x79\x16\xb5\x69\xbd\x26\x2e\xd9\xa6\xc0\xa4\x84\xf9\x99\xcb\x1e\xc4\xd4\x0f\xc2\x23\x8b\xa9\x91\x22\x12\x60\x74\xa4\x84\x17\x67\x50\xf2\x1c\x2b\x22\xc8\x45\x16\x5f\xd1\x92\x27\xcb\x70\xb2\xa4\x3c\x67\x29\x28\x01\x35\x53\x4d\x05\x77\x74\x79\x47\xc1\xc8\x98\xc3\x41\x3d\xd1\x82\x22\x12\x6c\xba\x6c\x1e\x93\x6d\x1f\xbd\x95\xa2\xb0\x7a\x18\x8c\x6f\x55\xc0\xe2\x0d\x55\x70\x55\x33\xa2\x82\x5f\x3f\x3f\x4a\x0d\x27\x6e\xa0\x46\xaf\x3a\x5b\x55\x8c\xa4\xf8\xcf\x4c\x99\x07\xa1\x66\xaf\x29\xb4\x4c\x35\x75\xda\x9a\xe7\x1f\xd8\x3d\xab\xf7\x68\x26\x79\xa9\x7a\x9a\x65\x4c\x41\x4e\x6b\x05\x36\xed\x96\x42\x82\xd2\x0c\x79\xf0\x15\xaa\x96\x0f\x0f\xbe\x4e\xa6\x30\x94\x6d\xdc\xe7\xa9\x7d\x7c\x4c\x74\x44\x75\x5e\xa1\xf6\xe6\x4f\x94\x6e\x48\x70\x8e\x29\x5d\xd0\x3b\x16\xf6\x78\x6f\x0a\x2f\xa3\x29\x09\xc6\xe9\x73\x37\x7f\xce\xf7\x42\x39\x22\x0d\x5c\xe2\x21\xdb\x9a\x3c\xc7\xc5\x36\x19\xda\xbc\xc0\xe5\x2e\x38\x6d\x9c\xa6\x84\x04\xbe\x91\x73\xf0\x03\x45\xb4\xac\xc7\x28\xd4\x10\xc4\x1c\xa0\x64\xf7\x97\xf8\x67\x88\x4a\x6a\x06\x44\xbd\x0e\x3b\x2e\x5d\x6f\xac\xf6\x4f\xe0\xd3\x27\xa1\x5a\x62\xdd\x8f\x3b\x20\xd7\x01\xbb\xce\x41\x23\x99\x92\x4c\xc3\x9e\xb6\x5a\x62\x9f\x71\x1f\xdd\xde\xb1\xb0\x0e\x0a\x28\xd9\xb0\x0e\xa6\x3e\x9f\x07\xc1\x89\xf7\x79\xe1\x3e\x1b\xf2\x9d\xb7\x34\xdb\x37\xdb\x70\xf0\xf8\x53\x12\x78\x54\xec\xa7\xcd\x0e\x42\x9e\xc2\xcf\x3f\xfd\xe1\xd5\x1f\xfb\x99\x44\x02\x4b\xc3\xad\x0c\xad\x55\x8f\x9a\x1f\xb3\x5d\x9f\x5c\xaa\x91\xa5\xab\x8d\x96\xc0\xc3\x04\x8e\xec\x5a\x04\xd7\x4a\x54\x61\x84\x65\x9b\xc4\xb6\xd9\x38\x3d\x6e\x73\x7c\xbd\x19\x7f\x8b\x62\x18\x43\xe1\x9d\xef\x1a\x82\x2f\x21\x89\xed\xea\xaf\x67\xae\xd0\xd7\xda\xc1\xa8\x8a\xe1\xe1\xb8\x67\x47\xfc\x3e\xc6\xcc\x08\x23\x12\x20\x23\xb4\xef\x9f\xfa\xaf\x0f\xdf\xf9\x0d\xc5\x47\x3b\xe0\xbe\x94\xb9\x01\x1c\x55\xfd\x1c\x55\x7f\x4f\x6b\x47\x73\xd6\xf6\x27\xea\x94\xc4\x7e\x67\xf3\x83\x55\x6b\xaa\x94\x2a\xf6\x5e\x88\x2a\x34\x39\x04\xa7\xc7\xfb\x72\x27\xd2\x27\xea\x13\x1a\x65\xaf\x39\x98\x9f\x3d\x3d\x27\xfb\x29\x89\x9e\x58\x3b\x71\x42\x42\xb8\x8b\x87\xa2\xe1\xa3\x96\x4b\x22\x53\xf3\x88\x54\xd4\x19\xea\x62\x58\xd8\x5a\x8b\xee\x0c\x68\x55\xe5\x2b\xe3\xb1\xb0\xa8\xb1\xa3\x88\x75\xbd\x4d\x21\x89\x48\x80\x6e\x7d\x32\xb7\x68\xd8\xd7\x2c\xa7\x2b\x14\x75\x02\x47\x80\x13\x42\x7c\xcd\x12\xec\x67\x5c\x21\xeb\xe3\xc3\xc8\x38\xef\xa8\x00\x57\x0f\x93\xd8\x11\x05\xa2\x51\xae\x98\x39\x2a\xe3\x3e\x6b\x91\xc0\x64\xbe\xd7\xf3\x69\x53\x0c\x7c\x8b\xbe\xc0\x35\x07\xef\xa3\xeb\x07\x16\xbe\x43\x5f\x74\xe8\x9a\x11\xcc\x06\x2f\x35\x51\xa8\x19\x7e\xe2\xf7\x82\xa6\xef\xb0\x6f\x0c\x2d\x64\x84\xe7\xf1\x89\x51\xc3\xbe\xe8\x12\x33\xd8\xf8\x60\x6d\x46\xda\xb8\xe4\xac\x0c\xbb\x74\x89\xe0\x57\x87\xa2\x63\x21\xee\xd0\xfe\xd3\xe3\x6e\x07\x3e\xc2\x7c\xb8\x33\xbb\xb6\xc3\xe7\x07\x4f\x8b\xd6\xc6\x8c\xa0\x19\x83\x5e\x38\x24\xc7\x18\xc1\xa6\x47\xa9\xc8\x4e\x45\x9d\x91\x20\xa8\x15\x95\xfa\xec\xd7\x41\xfd\x20\xee\xb5\x71\x7b\xe5\xdb\x32\xc6\x1a\xa8\x33\xdb\xc7\xf4\xf3\xe4\xff\x2d\xdc\x35\x2f\x13\x16\x6a\x11\xad\x6b\xbc\x6d\xa7\xf0\xf2\xe4\x48\x6f\xbc\xe4\x79\xce\x6b\x9d\x51\x70\x78\xe8\xb9\xcf\xb8\xae\xb7\x64\x3c\x7a\x6a\xaa\x6b\xa7\x57\xad\x47\x5b\x47\x74\x9e\xd0\xae\x18\xf5\xc5\x0e\x67\x3c\x12\x0d\xeb\x8e\x81\x37\x1e\x75\x87\x0d\x61\x2f\xdf\xcf\xe0\x85\xff\xd9\xe3\x45\x70\xe7\xc0\x08\x57\x2e\xa4\xa0\x69\x42\x6b\x9d\x97\x5e\x23\xd5\x9d\x3a\x03\x03\x76\x33\x56\x61\x47\xa1\x29\xf8\x8c\xba\x26\x64\x36\xeb\xf5\xa3\x1a\x10\x35\x2e\xcc\x9b\x70\xcf\xd5\xad\x3b\x6a\x74\xef\xd9\x39\x23\x72\x43\xeb\xf7\xb0\x5d\x12\x63\x81\xb5\x45\x9b\xb2\x25\xc3\x13\x45\x2f\xb6\xc5\x67\x97\xd1\x64\x73\x20\xf9\xee\xeb\x45\x67\xaf\x0b\x37\x61\xe4\x0f\x78\x46\xf9\x78\x81\x27\x96\xd6\x85\x2f\x3d\xb0\xd1\xd3\x4c\x7f\xfe\xa2\xcf\x21\xd3\xd2\x98\xac\x41\xec\x96\x74\x3d\x88\xb3\xb3\x67\x61\x98\x47\x6f\x79\x49\x73\xfe\x4f\xf7\xb0\xc3\xc6\x97\x9b\x51\xd9\xed\xb0\x8e\x56\x8c\x6d\xe9\xac\xde\xec\xb8\xb4\xd9\x3e\x6e\x6f\xf4\xc3\x91\x6e\x3f\x34\x07\x6b\x12\x6f\xf5\x0a\xc4\x0e\xe0\x53\xc0\x63\xa6\x3b\x0b\xd0\xf9\x15\x2f\x3e\x76\xfc\x82\xbb\xe2\x8c\xa9\x2b\xb7\xaa\x9b\x09\xc9\x98\xde\xda\xcd\x54\x6e\xfa\x8a\xdd\x6c\xe0\x52\xbb\x9d\x7d\x42\xef\xe6\x28\xb6\x83\xd1\xc9\x14\x5a\x71\xdf\x3a\x1c\x3a\xfc\xad\xe9\xd0\x2f\x17\x5d\xf2\x58\x2e\xc6\x59\xde\x74\x16\x75\x2d\x41\x50\xb3\x9c\x25\xb6\x1d\xa2\x35\x73\x46\x9d\x1e\xb7\x42\xe2\x37\x52\x0a\x59\x87\xd1\x1c\x19\x66\x38\x20\x36\x92\xc1\x52\x8a\x62\xcf\xf8\xec\xa0\x6d\xdf\xe0\x43\x5b\x0e\xd0\xe0\xb3\xd9\x00\x5e\xb2\x84\xb3\xaf\x2c\x7d\x62\xbd\x07\x41\x90\x24\x28\xc0\x77\xfa\x48\x8a\x38\x99\x6b\x4d\xc9\xd6\x5e\x7d\x69\x18\x7f\x29\x0b\x2a\xeb\x5b\xaa\x93\x33\xfe\x0b\xcd\x1b\x36\x85\xc3\xc4\x50\xee\x76\xa4\x8c\xba\x6f\xa9\xa2\x79\x2f\x56\x8d\x83\xb1\x4e\x29\xa8\xd1\xff\xa0\x9e\x1d\xa4\xf3\xde\x98\xdc\x59\xe0\xc2\x68\x29\x3a\xa8\xef\x39\xd6\xfe\x83\x4e\xb1\x04\x87\xfb\xdd\xb6\x84\x51\x1c\xaa\x55\x65\xbb\xca\x20\x58\xaf\xff\xcf\x06\x7d\x7e\x06\xb1\x6e\xa8\xbc\xb9\xd9\xbe\x84\x50\x76\x78\x36\xf1\x39\x5a\xaf\xc1\xbe\xe7\xfb\xaf\xb7\xb4\xed\xc6\xbf\xa3\x5a\xfe\xbc\xad\x1d\x63\x9d\x85\xa7\x9a\xa4\x65\x9d\x53\xc5\x76\x43\x0d\x10\xc2\xa4\x3d\xec\x7c\xf7\x74\x4e\xe8\xd5\x7b\xf4\xa7\xed\xb0\xec\x88\x4b\xab\x8a\x8b\x8b\xcd\x2b\x5f\xad\xd9\xc1\x57\x9b\xbb\x63\xa1\x09\x9c\x2b\xbb\x69\xcf\xf8\xae\xe4\xb9\x31\xbc\xc2\xca\x0d\x97\x85\x8a\xaf\x2b\x9b\xc7\xee\xae\xc3\x89\xe3\x35\xb0\xa2\x52\xab\x49\x64\xb2\x36\x65\x4b\xda\xe4\x6a\xe7\xfb\x4d\xc9\x1e\x2a\x96\x28\x34\x62\x55\x31\x38\xf8\x0c\xbc\x04\x51\x32\xb1\x9c\x4c\xe1\x21\xea\x92\xc6\x9e\xbf\x9e\x7e\x63\x53\x23\x95\xca\xd2\xe4\x28\x5d\x38\x75\xfb\x7c\x61\xfb\xfc\xe7\xcd\x20\x99\x80\x24\xde\x1a\x8d\x10\xee\x79\x34\xda\x51\xe7\xc9\x8f\xa6\xcc\x1d\xd7\x49\x5a\xf3\x3d\xa7\x0c\x19\x19\xaf\x7e\x3f\x5c\xda\xb6\xaa\xae\x4d\x75\x62\x4f\x8f\xdd\x55\x43\xdf\x80\x70\xc2\x4b\xc5\xa4\x6c\x2a\x85\xe9\x9d\x32\xa5\xf3\x75\x12\xf5\x99\xa7\xe7\xe2\xa0\xbd\xb6\x18\xfb\xd6\xa3\x7f\x93\xd1\x2b\xba\x1e\xbd\x74\xf6\x5f\xe4\xa2\x66\xe1\x18\x1d\x8c\xa7\x47\x82\xfb\xf7\xa6\x87\x2d\x77\xbd\xb1\xcd\xdd\x9e\x74\x3f\x69\xbf\x43\xfc\xe8\xa5\xb3\x95\xee\x0b\x73\xb7\x8d\xdf\x67\xeb\xd8\xd5\xf2\x88\x30\x7b\xab\xfc\x5d\x76\x6d\xdf\xe6\x5b\x41\xfe\x88\xb8\xe3\xa2\xca\x34\x67\x10\xba\xe1\xc0\x74\xd8\xae\xbf\xfb\x0f\x5f\xfa\x3c\xe5\x2b\xb0\xc1\xb8\xe0\xae\xf0\xda\x3b\x10\x7f\x70\x78\xea\xb7\x61\xf6\xa5\x4f\x8f\x80\x7e\x7a\x0c\x75\x70\xbf\x62\xef\x1e\xce\x53\x7b\xf5\xe0\x5d\x97\x4c\xe1\x65\xb4\x6f\xc3\x42\x6f\x20\xa3\xd7\x26\x7b\xdf\x3a\x46\xdc\x60\x78\x45\x12\x5f\xf3\xac\xa4\xb9\x9e\x79\xfb\xc6\x9d\x4f\xfd\xa1\x6a\xbf\xca\x06\x3b\x18\xde\xee\xf8\xe0\x1b\xd3\x21\x3f\x0e\xb3\x07\xa4\xaf\xe0\xa2\xa7\xe0\xf7\xd9\xbe\xd9\x1a\x83\x7a\xe3\x9f\xae\x8e\xb1\xe1\x6c\xcf\x54\xad\x6f\xb0\x4c\xf1\x44\x58\x7c\xe6\x90\x1a\xb4\xc8\xe3\x6d\xf1\x53\x9b\xe2\xed\x93\xd8\x7a\x08\xfb\x17\x7d\xd4\xfd\xb8\xbe\x18\x83\xf7\xed\x3d\xf1\x9e\xee\xb7\xeb\x7d\x9f\xd3\xe2\x5a\x43\x87\x31\x19\xb6\xa7\xcf\xe8\x63\xfb\x57\xb6\x7e\x57\xf9\xec\x9e\xd2\xeb\x28\xbf\xad\x9f\x1c\xeb\x22\x9b\xff\x65\xde\x7f\x53\xe6\x35\xbf\xcb\xa4\x23\xbb\xdd\xb5\xdd\x21\xe4\x22\x1b\x5a\x94\x8b\xec\x12\x73\x73\xb0\x1e\x41\xa8\xff\x37\x63\x6a\xbe\xf1\x9a\x9a\xac\xb4\xbd\x84\x26\x63\xfd\xa5\xc1\xbe\x50\x60\x8e\xed\x79\x3e\xdf\xff\xf6\x30\x90\x6b\xdb\xd2\xf6\x82\x0b\x46\xfb\x29\x9e\x56\x53\xfb\x75\xff\x4a\xb1\xba\x9d\x91\x4c\x59\x5c\xda\xa2\x30\x8a\xef\x2b\x86\x13\x3d\x33\x8d\x97\x44\xcd\x24\xd7\x77\x79\x90\x50\xa9\xc0\x7a\xc1\x16\x86\x2d\x89\x2e\xff\xed\xbc\x71\x68\x6b\xde\xfd\xbb\x83\x35\x0f\x45\xea\xf2\x99\xdb\x2a\x22\x41\xa0\xcb\x75\xee\xfe\xf1\x60\xb1\x52\xec\x4d\x99\x88\x94\xc9\x50\xdb\x34\xf8\x9e\xb3\x6b\x6d\xaf\x59\x99\xba\x42\x2a\xea\x2c\xea\x31\xd1\xbf\x03\x00\x00\xff\xff\x98\x6b\x4f\x42\xb8\x26\x00\x00")

func contextGoTplBytes() ([]byte, error) {
	return bindataRead(
		_contextGoTpl,
		"context.go.tpl",
	)
}

func contextGoTpl() (*asset, error) {
	bytes, err := contextGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.go.tpl", size: 9912, mode: os.FileMode(420), modTime: time.Unix(1566801692, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.go.tpl": contextGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.go.tpl": &bintree{contextGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
