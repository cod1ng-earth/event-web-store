// Code generated by go-bindata.
// sources:
// context.go.tpl
// DO NOT EDIT!

package simba

import (
	"bytes"
	"compress/gzip"
	"fmt"
	"io"
	"io/ioutil"
	"os"
	"path/filepath"
	"strings"
	"time"
)

func bindataRead(data []byte, name string) ([]byte, error) {
	gz, err := gzip.NewReader(bytes.NewBuffer(data))
	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}

	var buf bytes.Buffer
	_, err = io.Copy(&buf, gz)
	clErr := gz.Close()

	if err != nil {
		return nil, fmt.Errorf("Read %q: %v", name, err)
	}
	if clErr != nil {
		return nil, err
	}

	return buf.Bytes(), nil
}

type asset struct {
	bytes []byte
	info  os.FileInfo
}

type bindataFileInfo struct {
	name    string
	size    int64
	mode    os.FileMode
	modTime time.Time
}

func (fi bindataFileInfo) Name() string {
	return fi.name
}
func (fi bindataFileInfo) Size() int64 {
	return fi.size
}
func (fi bindataFileInfo) Mode() os.FileMode {
	return fi.mode
}
func (fi bindataFileInfo) ModTime() time.Time {
	return fi.modTime
}
func (fi bindataFileInfo) IsDir() bool {
	return false
}
func (fi bindataFileInfo) Sys() interface{} {
	return nil
}

var _contextGoTpl = []byte("\x1f\x8b\x08\x00\x00\x00\x00\x00\x00\xff\xec\x5a\x5d\x6f\xdb\xc8\xd5\xbe\x1e\xfe\x8a\xb3\xc2\x6b\x83\xf4\x2b\x53\xce\xee\x62\x5b\x68\xad\x05\x2c\x27\x29\x02\xc4\x49\x10\x27\xdd\x8b\xa2\x28\xc6\xe4\x90\x1e\x98\xe4\xb0\xc3\x51\x6c\x55\xd5\x7f\x2f\xce\x7c\x90\x43\x8a\x92\xed\x24\x17\xc5\xa2\xbe\xb1\xc5\x19\x3e\xe7\xfb\x99\x73\x46\x9e\xcd\xe0\x52\xa4\x0c\x72\x56\x31\x49\x15\x4b\xe1\x66\x0d\x0d\x2f\x6f\x68\x0c\x2f\xdf\xc3\xbb\xf7\x9f\xe0\xd5\xcb\x37\x9f\xe2\x20\xa8\x69\x72\x47\x73\x06\x9b\x0d\xc4\xef\x68\xc9\x60\xbb\x0d\x02\x5e\xd6\x42\x2a\x08\x03\x32\xc9\x4a\x35\x09\xc8\xa4\x10\x39\xfe\x6a\xd6\x55\x32\x09\x36\x1b\xe0\x19\xb0\x7f\x42\xfc\x91\xd1\xf4\xad\x48\xee\x60\x72\x4f\xb9\x3a\xcd\x24\x63\x13\x44\x30\x3b\x67\x54\x89\x92\x27\xf8\xa2\xe2\x25\xd3\x2f\xb2\x2a\xd5\x22\xc8\x24\xe7\xea\x76\x75\x13\x27\xa2\x9c\x5d\xdf\x8a\x9a\x67\xeb\x59\x43\x25\x2d\xe9\xa4\xbf\x98\x8b\x82\x56\xf9\xac\x96\x42\x89\x9b\x55\x66\xfe\x98\x04\x08\x26\x69\x95\x33\x88\x97\x92\xa7\x39\x6b\x8c\x60\x34\xe4\xc3\x5d\xfe\x81\xaa\x5b\xd8\x6e\x7d\x99\x51\x10\x24\xa2\x6a\xb4\x5d\x9f\x44\xcd\x13\xc0\x9f\x05\x4c\x3c\xdb\x27\x01\xf9\x40\xa5\xe2\x8a\x8b\x0a\x16\x70\x86\x2f\xa9\x75\xcd\x20\x11\x95\x62\x0f\x0a\x1a\x25\x57\x89\x82\x4d\x40\x52\x51\xb1\xcb\x5b\x84\x48\x6e\x69\x65\x17\x36\xdb\x3d\x7a\x99\xdd\xad\xa4\x7f\x83\xe2\xaa\x40\x89\xa3\x00\x56\x63\x92\x14\x9c\x55\x0a\xb7\x18\xd7\xc4\x97\xfa\x41\x40\xd0\x90\x55\xc9\x64\xb7\x60\x1f\x04\xa4\x96\x22\x5d\x25\xde\xd2\xf5\xba\x4a\x3e\xd8\x87\x41\x40\x6e\xa8\x4a\x6e\xdf\x67\x59\xc3\x14\xf0\x4a\xfd\xf2\x73\x30\x1a\x50\xf6\x90\x14\xab\x86\x7f\xb1\x01\x2d\x45\xca\x0a\x80\x13\xfd\x3b\x20\x05\xee\x01\x38\xc1\x30\xc7\x57\x2b\xc5\x1e\xb4\xda\x45\xc3\x76\x91\x6a\x2a\x69\x51\xb0\xe2\x71\xa0\x8f\xbf\x3f\x02\x35\xc8\x32\xc9\x68\xca\xe4\xc5\xe5\x2d\xfa\x3b\xb5\x20\x97\xa2\x4a\xdd\xd2\x72\x6c\x89\xbe\x69\x10\x91\x57\xb9\x4e\x80\x1b\x21\x0a\xb7\xbf\xb9\x00\xf3\xc3\x2b\xf5\xd3\x8f\xed\xd3\x65\xff\xa9\x56\xdd\xed\xec\x4c\xd1\xbf\x96\xc3\xc7\x01\xb9\x97\x5c\xb1\xe6\x23\x4b\x85\x09\xf4\xc9\x20\x64\x57\xac\x69\x68\xce\x7a\xd5\x21\x4c\x7c\x3a\xb9\xbf\xfc\xec\x1e\x8e\x98\xb4\x0d\x82\x6c\x55\x25\xf0\x8e\xdd\x5f\x9a\x3c\x0d\x6f\xa4\xb8\x63\xb2\x81\x93\xbf\xfd\xbd\x51\x92\x57\xf9\x14\x92\x2c\xf7\x65\x67\x3c\x8f\xda\xb4\xde\x04\x2e\xd9\xa6\xc0\xa4\x84\xf9\xc2\x65\x0f\x62\xea\x85\xf0\xc4\x62\x6a\xa4\x28\x20\x18\x1d\x29\xe1\x87\x05\x54\xbc\xc0\x8a\x20\x85\xc8\xe3\x0f\xb4\xe2\x49\x16\x4e\x32\xca\x0b\x96\x82\x12\xd0\x30\xb5\xaa\xe1\x8e\x66\x77\x14\x8c\x8c\x39\x1c\x35\x13\x2d\x28\x0a\xc8\xb6\xcb\xe6\x31\xd9\x76\xe9\xb5\x14\xa5\xd5\xc3\x60\x7c\xad\x02\x16\x6f\xa8\x82\xab\x9a\x11\x15\xfc\xfa\xf9\x5e\x6a\x38\x71\x03\x35\x7a\xd5\xd9\xaa\x62\x24\xc5\x7f\x61\xca\x2c\x84\x9a\xbd\xa6\xd0\x32\xd5\xd4\x69\x6b\xd6\xdf\xb1\x7b\xd6\x1c\xd0\x4c\xf2\x4a\xf5\x34\xcb\x99\x82\x82\x36\x0a\x6c\xda\x65\x42\x82\xd2\x0c\x79\xf4\x05\xea\x96\x0f\x8f\xbe\x4c\xa6\x30\x94\x6d\xdc\xe7\xa9\x7d\x7a\x1a\xe8\x88\xea\xbc\x42\xed\xcd\x9f\x28\xdd\x90\xe0\x1c\x53\xba\xa4\x77\x2c\xec\xf1\xde\x14\x5e\x44\xd3\x80\x8c\xd3\xe7\x7e\xfe\x9c\x1f\x84\x72\x44\x4a\x5c\xe2\x21\xdb\x9a\x3c\xc7\x87\x6d\x32\xb4\x79\x81\x8f\xbb\xe0\xb4\x71\x9a\x06\x01\xf1\x8d\x9c\x83\x1f\xa8\x40\xcb\x7a\x8c\x42\x0d\x41\xcc\x01\x2a\x76\x7f\x85\x7f\x86\xa8\xa4\x66\x40\xd4\xeb\xb8\xe3\xd2\xcd\xd6\x6a\xff\x04\x3e\x7d\x12\xaa\x25\xd6\xc3\xb8\x03\x72\x1d\xb0\xeb\x1c\x34\x92\x29\xc9\x34\xec\x69\xab\x25\xf6\x19\xf7\xd1\xed\x1d\x0b\xeb\xa0\x80\x92\x2b\xd6\xc1\x34\x17\x73\x42\xce\xbc\xcf\x4b\xf7\xd9\x90\xef\xbc\xa5\xd9\xbe\xd9\x86\x83\xc7\x57\x03\xe2\x51\xb1\x9f\x36\x7b\x08\x79\x0a\x3f\xfd\xf8\xa7\x5f\xfe\xdc\xcf\xa4\x80\x58\x1a\x6e\x65\x68\xad\x7a\xd4\xfc\x98\xed\xfa\xe4\x52\x2b\x59\xb9\xda\x68\x09\x3c\x4c\xe0\xc4\x3e\x8b\xe0\x5a\x89\x3a\x8c\xb0\x6c\x93\xd8\x36\x1b\xe7\xa7\x6d\x8e\x6f\xb6\xe3\x6f\x51\x0c\x63\x28\xbc\xf3\x5d\x43\xf0\xcc\x15\xf7\x62\x01\xa7\x2f\x34\x19\x18\x25\xb4\x3e\x3c\x83\x24\xb6\x1b\x7e\x5b\xb8\xad\x83\x4d\x6e\x87\x35\x33\x7e\x1b\x63\xe2\x84\x51\x40\x90\x30\xda\xf7\xcf\xfd\xd7\x87\xef\xfc\x8e\xda\x45\x7b\xe0\x3e\x57\x85\x01\x1c\xb5\xec\x02\x2d\x7b\x4b\x1b\xc7\x82\xd6\x35\xc6\xe0\x24\xf6\x0a\x72\x0f\xc0\xaa\x4e\xa9\x62\x6f\x85\xa8\x43\x93\x08\x70\x7e\x7a\x28\x01\x22\x7d\x2c\x3e\xa1\xdb\xf5\x4e\xf8\xf9\xe2\xe9\x89\xd5\xcf\x2b\xf4\xe1\xc6\x89\x13\x12\xc2\x7d\x64\x12\x0d\x97\x5a\x42\x88\x4c\xe1\x22\x52\xd9\xe4\xa8\x8b\xa1\x52\x6b\x2d\xc6\x83\xd0\xba\x2e\xd6\xc6\xe5\x61\xd9\x60\x5b\x10\xeb\xa2\x99\x42\x12\x05\x04\xe3\xf2\x64\x82\xd0\xb0\x2f\x59\x41\xd7\x28\xea\x0c\x4e\x00\xdb\xfc\xf8\x9a\x25\xd8\x94\xb8\x6a\xd4\x67\x80\x91\x71\xd1\xd5\x33\x3e\x3d\x4e\x62\x57\xed\x88\x46\xb9\x62\xe6\xbc\x8b\xfb\xd4\x13\x10\x93\x9f\x5e\xe3\xa6\x4d\x31\xf0\x2d\xfa\x12\x9f\x39\x78\x1f\x5d\x2f\x58\xf8\x0e\x7d\xd9\xa1\xeb\xb2\x36\x1b\xbc\xa4\x46\xa1\x66\x82\x89\xdf\x0a\x9a\xbe\xc1\xe6\x2f\xb4\x90\x11\x1e\xaa\x67\x46\x0d\xfb\xa2\xcb\x6c\xb2\xf5\xc1\xda\x94\xb6\x71\x29\x58\x15\x76\xe9\x12\xc1\x6f\x0e\x45\xc7\x42\xdc\xa1\xfd\xe7\xa7\xdd\x0e\x5c\xc2\x7c\xb8\x33\xbb\x76\xc3\xe7\x07\x4f\x8b\xd6\xc6\x8c\xa0\x19\x83\x7e\x70\x48\xae\xae\xc9\xb6\xc7\x8b\x48\x31\x65\x93\x07\x84\x34\x8a\x4a\x7d\x80\xeb\xa0\xbe\x13\xf7\xda\xb8\x83\xf2\x6d\xdd\x63\x0d\x34\xb9\x6d\x46\xfa\x79\xf2\xff\x16\xee\x9a\x57\x09\x0b\xb5\x88\xd6\x35\xde\xb6\x73\x78\x71\x76\xa2\x37\x5e\xf1\xa2\xe0\x8d\xce\x28\x38\x3e\xf6\xdc\x67\x5c\xd7\x7b\x64\x3c\x7a\x6e\xaa\x6b\xaf\x57\xad\x47\x5b\x47\x74\x9e\xd0\xae\x18\xf5\xc5\x1e\x67\x3c\x12\x0d\x47\xb8\x7d\x6f\x3c\xea\x0e\x1b\xc2\x5e\xbe\x2f\xe0\x07\xff\xb3\x47\xac\xe0\xd8\x7a\x84\x6c\x97\x52\xd0\x34\xa1\x8d\xce\x4b\xaf\x1b\xea\x8e\x8e\x81\x01\xfb\x19\xab\xb4\xf3\xcc\x14\x7c\x46\xdd\x04\xc1\x6c\xd6\x6b\x2a\x35\x20\x6a\x5c\x9a\x37\xe1\x9e\xab\x5b\x77\x20\xe8\x06\xb2\x73\x46\xe4\x26\xcf\x6f\x61\xbb\x24\xc6\x02\x6b\x8b\x36\x65\x19\xc3\xb3\x48\x3f\x6c\x8b\xcf\x3e\x46\x93\xcd\xb1\xe1\xbb\xaf\x17\x9d\x83\x2e\xdc\x86\x91\x3f\xa5\x19\xe5\xe3\x25\x1e\x3c\x5a\x17\x9e\x79\x60\x70\x0e\xbd\x43\x49\x8b\xd5\x9f\x3f\xeb\x73\xc8\xf4\x25\x26\x6b\x10\xbb\x25\x5d\x0f\x62\xb1\x78\x16\x86\x59\x7a\xcd\x2b\x5a\xf0\x7f\xb9\xc5\x0e\x1b\x5f\x5e\x8d\xca\x6e\x27\x6e\xb4\x62\x6c\x4b\x67\xf5\x76\xcf\xcd\xcb\xee\x71\x7b\xa3\x17\x47\x5a\xf6\xd0\x1c\xac\x49\xbc\x73\xa2\x07\x76\x8a\x9e\x02\x1e\x33\xdd\x59\x60\xf3\xd7\xdd\xd2\xbc\xef\x78\x06\x77\xc7\x39\x53\x23\x62\x5a\x50\x82\x60\xf8\xbb\xee\x06\x26\x37\x5a\xc5\xae\xf1\x77\x29\xdf\x0e\x36\xa1\x27\x30\xb6\x53\xcf\xd9\x14\x76\xd4\xf8\xda\x09\xd0\xc9\xd9\x19\x01\xfd\x72\xd2\x94\x80\xe5\x64\x9c\xe9\x8d\x60\x51\xd7\x32\x90\x86\x15\x2c\xb1\xfd\x16\x6d\x98\x33\xee\xfc\xb4\x15\x12\xbf\x92\x52\xc8\x26\x8c\xe6\xc8\x40\xc3\x29\x70\x25\x19\x64\x52\x94\x07\x66\x64\x07\x6d\xfb\x0a\x1f\xda\x72\x84\x06\x9f\xcd\x06\xf0\x92\x25\x9c\x7d\x61\xe9\x13\xf9\x80\x10\x92\x24\x28\xc0\x77\xfe\x48\x6c\x9d\xcc\x8d\xa6\x6c\x6b\xaf\xbe\x19\x8c\x3f\x57\x25\x95\xcd\x2d\xd5\xc9\x1b\xff\x95\x16\x2b\x36\x85\xe3\xc4\x50\xf2\x6e\xa4\x8c\xba\xaf\xa9\xa2\x45\x2f\x56\x2b\x07\x63\x9d\x52\x52\xa3\xff\x51\x33\x3b\x4a\xe7\xbd\x59\xb8\xb3\xc0\x85\xd1\x52\x38\x69\xee\x39\x72\xc3\x83\x4e\xb5\x04\x27\xf8\xfd\xb6\x84\x51\x1c\xaa\x75\x6d\xbb\x4e\x42\x36\x9b\xff\xb3\x41\x9f\x2f\x20\xd6\x0d\x97\x37\x1c\xdb\x97\x10\xca\x4e\xc8\x26\x3e\x27\x9b\x0d\xd8\xf7\x7c\xff\xf5\x1e\xed\xba\xf1\x1f\xa8\x96\x3f\x54\x6b\xc7\x58\x67\xe1\xa9\x27\x69\xd5\x14\x54\xb1\xfd\x50\x03\x84\x30\x69\x0f\x43\xdf\x3d\x9d\x13\x7a\x7c\x10\xfd\xba\x1b\x96\x3d\x71\x69\x55\x71\x71\xb1\x79\xe5\xab\x35\x3b\xfa\x62\x73\x77\x2c\x34\xc4\xb9\xb2\x1b\xe9\x8c\xef\x2a\x5e\x18\xc3\x6b\xac\xdc\x30\x2b\x55\x7c\x5d\xdb\x3c\x76\x17\x1a\x4e\x1c\x6f\x80\x95\xb5\x5a\x4f\x22\x93\xb5\x29\xcb\xe8\xaa\x50\x7b\xdf\x5f\x55\xec\xa1\x66\x89\x42\x23\xd6\x35\x83\xa3\x4f\xc0\x2b\x10\x15\x13\xd9\x64\x0a\x0f\x51\x97\x34\xf6\x7c\xf6\xf4\x1b\x1b\x0d\xa9\x54\x96\x46\x47\xe9\xc2\xa9\xdb\xe7\x0b\x3b\x07\x3c\x6f\x46\xc9\x05\x24\xf1\xce\xe8\x84\x70\xcf\xa3\xd3\x8e\x42\xcf\xbe\x37\x65\xee\xb9\x33\xd2\x9a\x1f\x38\x85\x82\x91\xf1\xeb\x8f\xc3\xa5\x6d\x2b\xeb\xda\x58\x27\xf6\xfc\xd4\xdd\x27\xf4\x0d\x08\x27\xbc\x52\x4c\xca\x55\xad\x30\xbd\x53\xa6\x74\xbe\x4e\xa2\x3e\xf3\xf4\x5c\x4c\xda\xbb\x89\xb1\xaf\x36\xfa\xd7\x15\xbd\xa2\xeb\xd1\x4b\x67\xff\x65\x21\x1a\x16\x8e\xd1\xc1\x78\x7a\x24\xb8\xff\x60\x7a\xd8\x72\xd7\x1b\xdb\xdc\xed\x49\xf7\x93\xf6\x1b\xc4\x8f\xde\x2c\x5b\xe9\xbe\x30\x77\xa5\xf8\x6d\xb6\x8e\xdd\x1f\x8f\x08\xb3\x57\xc7\xdf\x64\xd7\xee\x95\xbd\x15\xe4\x8f\x90\x7b\x6e\xa3\x4c\xf3\x06\xa1\x1b\x1e\x4c\x07\xee\xfa\xbf\x27\x5e\x27\xed\xb6\xc0\x5f\x77\xab\xf4\x94\xef\xb9\x06\xe3\x84\xbb\xa7\x6b\xef\x48\xfc\xc1\xe2\xa9\x5f\x79\xd9\x97\x3e\x3e\x02\xfa\xf1\x31\xd4\xc1\xfd\x8b\xbd\x9b\xb8\x48\xed\xd5\x84\x77\x9d\x32\x85\x17\xd1\xa1\x0d\x4b\xbd\x21\x18\xbd\x56\x39\xf8\xd6\x29\xe2\x92\xe1\x15\x4a\x7c\xcd\xf3\x8a\x16\x7a\x26\xee\x1b\x77\x31\xf5\x87\xae\xc3\x2a\x1b\x6c\x32\xbc\xfd\xf1\xc1\xb7\xa6\x43\x7e\x1c\xe6\x00\x48\x5f\xc1\x65\x4f\xc1\x6f\xb3\x7d\xbb\x33\x26\xf5\xc6\x43\x5d\x1d\x63\xc3\xdb\x81\xa9\x5b\xdf\x70\x99\xe2\x89\xb0\xf8\xcc\x21\x35\x68\x91\xc7\xdb\xe2\xa7\x36\xc5\xbb\x27\xb1\xf5\x10\xf6\x2f\xfa\xa8\xfb\x7e\x7d\x31\x06\xef\xeb\x7b\xe2\x03\xdd\x6f\xd7\xfb\x3e\xa7\xc5\xb5\x86\x0e\x63\x32\x6c\x4f\x9f\xd1\xc7\xf6\xaf\x74\xfd\xae\xf2\xd9\x3d\xa5\xd7\x51\x7e\x5d\x3f\x39\xd6\x45\xae\xfe\x97\x79\xff\x4d\x99\xb7\xfa\x43\x26\x5d\xb0\xdf\x5d\xbb\x1d\x42\x21\xf2\xa1\x45\x85\xc8\xaf\x30\x37\x07\xcf\x23\x08\xf5\x3f\x60\x4c\xcd\xd7\x5a\x53\x93\x95\x26\x40\xb3\x99\xdf\x28\xef\x62\x4e\xa2\x5f\xd1\x35\x9a\xb2\xf5\x57\x0f\x87\x02\x86\x99\x78\x60\x7d\x7e\xf8\xed\x61\xb8\x37\xb6\xf1\xed\xa5\x00\x18\x1b\xa7\x78\xa6\x4d\xed\x37\xff\x6b\xc5\x9a\x76\x92\x32\xc5\x73\x65\x4b\xc7\x28\x7e\xa8\x64\xce\xf4\x64\x35\x5e\x38\x0d\x93\x5c\xdf\x08\x42\x42\xa5\x02\xeb\x05\x5b\x3e\xb6\x70\xba\x2a\xb1\x53\xc9\xb1\x65\x06\xf7\x9f\x0f\xd6\x3c\x14\xa9\x8b\x6c\x6e\x6b\x2d\x20\x44\x17\xf5\xdc\xfd\x0f\xc2\x72\xad\xd8\xab\x2a\x11\x29\x93\xa1\xb6\x69\xf0\x95\x67\xd7\x00\x5f\xb3\x2a\x75\xe5\x56\x36\x79\xd4\xe3\xab\xff\x04\x00\x00\xff\xff\x4d\xaf\xba\x47\xc3\x26\x00\x00")

func contextGoTplBytes() ([]byte, error) {
	return bindataRead(
		_contextGoTpl,
		"context.go.tpl",
	)
}

func contextGoTpl() (*asset, error) {
	bytes, err := contextGoTplBytes()
	if err != nil {
		return nil, err
	}

	info := bindataFileInfo{name: "context.go.tpl", size: 9923, mode: os.FileMode(420), modTime: time.Unix(1566884669, 0)}
	a := &asset{bytes: bytes, info: info}
	return a, nil
}

// Asset loads and returns the asset for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func Asset(name string) ([]byte, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("Asset %s can't read by error: %v", name, err)
		}
		return a.bytes, nil
	}
	return nil, fmt.Errorf("Asset %s not found", name)
}

// MustAsset is like Asset but panics when Asset would return an error.
// It simplifies safe initialization of global variables.
func MustAsset(name string) []byte {
	a, err := Asset(name)
	if err != nil {
		panic("asset: Asset(" + name + "): " + err.Error())
	}

	return a
}

// AssetInfo loads and returns the asset info for the given name.
// It returns an error if the asset could not be found or
// could not be loaded.
func AssetInfo(name string) (os.FileInfo, error) {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	if f, ok := _bindata[cannonicalName]; ok {
		a, err := f()
		if err != nil {
			return nil, fmt.Errorf("AssetInfo %s can't read by error: %v", name, err)
		}
		return a.info, nil
	}
	return nil, fmt.Errorf("AssetInfo %s not found", name)
}

// AssetNames returns the names of the assets.
func AssetNames() []string {
	names := make([]string, 0, len(_bindata))
	for name := range _bindata {
		names = append(names, name)
	}
	return names
}

// _bindata is a table, holding each asset generator, mapped to its name.
var _bindata = map[string]func() (*asset, error){
	"context.go.tpl": contextGoTpl,
}

// AssetDir returns the file names below a certain
// directory embedded in the file by go-bindata.
// For example if you run go-bindata on data/... and data contains the
// following hierarchy:
//     data/
//       foo.txt
//       img/
//         a.png
//         b.png
// then AssetDir("data") would return []string{"foo.txt", "img"}
// AssetDir("data/img") would return []string{"a.png", "b.png"}
// AssetDir("foo.txt") and AssetDir("notexist") would return an error
// AssetDir("") will return []string{"data"}.
func AssetDir(name string) ([]string, error) {
	node := _bintree
	if len(name) != 0 {
		cannonicalName := strings.Replace(name, "\\", "/", -1)
		pathList := strings.Split(cannonicalName, "/")
		for _, p := range pathList {
			node = node.Children[p]
			if node == nil {
				return nil, fmt.Errorf("Asset %s not found", name)
			}
		}
	}
	if node.Func != nil {
		return nil, fmt.Errorf("Asset %s not found", name)
	}
	rv := make([]string, 0, len(node.Children))
	for childName := range node.Children {
		rv = append(rv, childName)
	}
	return rv, nil
}

type bintree struct {
	Func     func() (*asset, error)
	Children map[string]*bintree
}

var _bintree = &bintree{nil, map[string]*bintree{
	"context.go.tpl": &bintree{contextGoTpl, map[string]*bintree{}},
}}

// RestoreAsset restores an asset under the given directory
func RestoreAsset(dir, name string) error {
	data, err := Asset(name)
	if err != nil {
		return err
	}
	info, err := AssetInfo(name)
	if err != nil {
		return err
	}
	err = os.MkdirAll(_filePath(dir, filepath.Dir(name)), os.FileMode(0755))
	if err != nil {
		return err
	}
	err = ioutil.WriteFile(_filePath(dir, name), data, info.Mode())
	if err != nil {
		return err
	}
	err = os.Chtimes(_filePath(dir, name), info.ModTime(), info.ModTime())
	if err != nil {
		return err
	}
	return nil
}

// RestoreAssets restores an asset under the given directory recursively
func RestoreAssets(dir, name string) error {
	children, err := AssetDir(name)
	// File
	if err != nil {
		return RestoreAsset(dir, name)
	}
	// Dir
	for _, child := range children {
		err = RestoreAssets(dir, filepath.Join(name, child))
		if err != nil {
			return err
		}
	}
	return nil
}

func _filePath(dir, name string) string {
	cannonicalName := strings.Replace(name, "\\", "/", -1)
	return filepath.Join(append([]string{dir}, strings.Split(cannonicalName, "/")...)...)
}
