{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Checkout exposing
    ( Cart, Position, OrderCartResonse
    , cartDecoder, positionDecoder, orderCartResonseDecoder
    , toCartEncoder, toPositionEncoder, toOrderCartResonseEncoder
    )

{-| ProtoBuf module: `Checkout`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.6.1
  - the following specification file: `api.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs Cart, Position, OrderCartResonse


# Decoder

@docs cartDecoder, positionDecoder, orderCartResonseDecoder


# Encoder

@docs toCartEncoder, toPositionEncoder, toOrderCartResonseEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `Cart` message
-}
type alias Cart =
    { id : String
    , positions : List Position
    }


{-| `Position` message
-}
type alias Position =
    { productID : String
    , price : Int
    , name : String
    , smallImageURL : String
    , quantity : Int
    , inStock : Bool
    , moreInStock : Bool
    }


{-| `OrderCartResonse` message
-}
type alias OrderCartResonse =
    { successful : Bool
    }



-- DECODER


{-| `Cart` decoder
-}
cartDecoder : Decode.Decoder Cart
cartDecoder =
    Decode.message (Cart "" [])
        [ Decode.optional 1 Decode.string setId
        , Decode.repeated 2 positionDecoder .positions setPositions
        ]


{-| `Position` decoder
-}
positionDecoder : Decode.Decoder Position
positionDecoder =
    Decode.message (Position "" 0 "" "" 0 False False)
        [ Decode.optional 1 Decode.string setProductID
        , Decode.optional 2 Decode.int32 setPrice
        , Decode.optional 3 Decode.string setName
        , Decode.optional 4 Decode.string setSmallImageURL
        , Decode.optional 6 Decode.int32 setQuantity
        , Decode.optional 7 Decode.bool setInStock
        , Decode.optional 8 Decode.bool setMoreInStock
        ]


{-| `OrderCartResonse` decoder
-}
orderCartResonseDecoder : Decode.Decoder OrderCartResonse
orderCartResonseDecoder =
    Decode.message (OrderCartResonse False)
        [ Decode.optional 1 Decode.bool setSuccessful
        ]



-- ENCODER


{-| `Cart` encoder
-}
toCartEncoder : Cart -> Encode.Encoder
toCartEncoder model =
    Encode.message
        [ ( 1, Encode.string model.id )
        , ( 2, Encode.list toPositionEncoder model.positions )
        ]


{-| `Position` encoder
-}
toPositionEncoder : Position -> Encode.Encoder
toPositionEncoder model =
    Encode.message
        [ ( 1, Encode.string model.productID )
        , ( 2, Encode.int32 model.price )
        , ( 3, Encode.string model.name )
        , ( 4, Encode.string model.smallImageURL )
        , ( 6, Encode.int32 model.quantity )
        , ( 7, Encode.bool model.inStock )
        , ( 8, Encode.bool model.moreInStock )
        ]


{-| `OrderCartResonse` encoder
-}
toOrderCartResonseEncoder : OrderCartResonse -> Encode.Encoder
toOrderCartResonseEncoder model =
    Encode.message
        [ ( 1, Encode.bool model.successful )
        ]



-- SETTERS


setId : a -> { b | id : a } -> { b | id : a }
setId value model =
    { model | id = value }


setPositions : a -> { b | positions : a } -> { b | positions : a }
setPositions value model =
    { model | positions = value }


setProductID : a -> { b | productID : a } -> { b | productID : a }
setProductID value model =
    { model | productID = value }


setPrice : a -> { b | price : a } -> { b | price : a }
setPrice value model =
    { model | price = value }


setName : a -> { b | name : a } -> { b | name : a }
setName value model =
    { model | name = value }


setSmallImageURL : a -> { b | smallImageURL : a } -> { b | smallImageURL : a }
setSmallImageURL value model =
    { model | smallImageURL = value }


setQuantity : a -> { b | quantity : a } -> { b | quantity : a }
setQuantity value model =
    { model | quantity = value }


setInStock : a -> { b | inStock : a } -> { b | inStock : a }
setInStock value model =
    { model | inStock = value }


setMoreInStock : a -> { b | moreInStock : a } -> { b | moreInStock : a }
setMoreInStock value model =
    { model | moreInStock = value }


setSuccessful : a -> { b | successful : a } -> { b | successful : a }
setSuccessful value model =
    { model | successful = value }
