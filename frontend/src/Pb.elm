{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Pb exposing
    ( CartChangeAction(..), CatalogPage, Product, ProductUpdate, CheckoutContextMsg(..), CheckoutContext, CartChange, CartOrder, Stock
    , catalogPageDecoder, productDecoder, productUpdateDecoder, checkoutContextDecoder, cartChangeDecoder, cartOrderDecoder, stockDecoder
    , toCatalogPageEncoder, toProductEncoder, toProductUpdateEncoder, toCheckoutContextEncoder, toCartChangeEncoder, toCartOrderEncoder, toStockEncoder
    )

{-| ProtoBuf module: `Pb`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.6.1
  - the following specification file: `products.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs CartChangeAction, CatalogPage, Product, ProductUpdate, CheckoutContextMsg, CheckoutContext, CartChange, CartOrder, Stock


# Decoder

@docs catalogPageDecoder, productDecoder, productUpdateDecoder, checkoutContextDecoder, cartChangeDecoder, cartOrderDecoder, stockDecoder


# Encoder

@docs toCatalogPageEncoder, toProductEncoder, toProductUpdateEncoder, toCheckoutContextEncoder, toCartChangeEncoder, toCartOrderEncoder, toStockEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `CartChangeAction` enumeration
-}
type CartChangeAction
    = Add
    | Remove
    | CartChangeActionUnrecognized_ Int


{-| `CatalogPage` message
-}
type alias CatalogPage =
    { products : List Product
    , totalItems : Int
    , totalPages : Int
    , currentPage : Int
    , setPageTo : Int
    , sorting : String
    , filtering : String
    , itemsPerPage : Int
    }


{-| `Product` message
-}
type alias Product =
    { uuid : String
    , title : String
    , description : String
    , longtext : String
    , category : String
    , smallImageURL : String
    , largeImageURL : String
    , price : Float
    }


{-| `ProductUpdate` message
-}
type alias ProductUpdate =
    { old : Maybe Product
    , new : Maybe Product
    }


{-| CheckoutContextMsg
-}
type CheckoutContextMsg
    = CheckoutContextMsgCartChange CartChange
    | CheckoutContextMsgStock Stock
    | CheckoutContextMsgProductUpdate ProductUpdate
    | CheckoutContextMsgCartOrder CartOrder


{-| `CheckoutContext` message
-}
type alias CheckoutContext =
    { checkoutContextMsg : Maybe CheckoutContextMsg
    }


{-| `CartChange` message
-}
type alias CartChange =
    { cartID : String
    , uuid : String
    , action : CartChangeAction
    }


{-| `CartOrder` message
-}
type alias CartOrder =
    { cartID : String
    }


{-| `Stock` message
-}
type alias Stock =
    { uuid : String
    , quantity : Int
    }



-- DECODER


cartChangeActionDecoder : Decode.Decoder CartChangeAction
cartChangeActionDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        Add

                    1 ->
                        Remove

                    v ->
                        CartChangeActionUnrecognized_ v
            )


{-| `CatalogPage` decoder
-}
catalogPageDecoder : Decode.Decoder CatalogPage
catalogPageDecoder =
    Decode.message (CatalogPage [] 0 0 0 0 "" "" 0)
        [ Decode.repeated 1 productDecoder .products setProducts
        , Decode.optional 2 Decode.int32 setTotalItems
        , Decode.optional 3 Decode.int32 setTotalPages
        , Decode.optional 4 Decode.int32 setCurrentPage
        , Decode.optional 5 Decode.int32 setSetPageTo
        , Decode.optional 6 Decode.string setSorting
        , Decode.optional 7 Decode.string setFiltering
        , Decode.optional 8 Decode.int32 setItemsPerPage
        ]


{-| `Product` decoder
-}
productDecoder : Decode.Decoder Product
productDecoder =
    Decode.message (Product "" "" "" "" "" "" "" 0)
        [ Decode.optional 1 Decode.string setUuid
        , Decode.optional 2 Decode.string setTitle
        , Decode.optional 3 Decode.string setDescription
        , Decode.optional 4 Decode.string setLongtext
        , Decode.optional 8 Decode.string setCategory
        , Decode.optional 5 Decode.string setSmallImageURL
        , Decode.optional 6 Decode.string setLargeImageURL
        , Decode.optional 7 Decode.float setPrice
        ]


{-| `ProductUpdate` decoder
-}
productUpdateDecoder : Decode.Decoder ProductUpdate
productUpdateDecoder =
    Decode.message (ProductUpdate Nothing Nothing)
        [ Decode.optional 1 (Decode.map Just productDecoder) setOld
        , Decode.optional 2 (Decode.map Just productDecoder) setNew
        ]


{-| `CheckoutContext` decoder
-}
checkoutContextDecoder : Decode.Decoder CheckoutContext
checkoutContextDecoder =
    Decode.message (CheckoutContext Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map CheckoutContextMsgCartChange cartChangeDecoder )
            , ( 2, Decode.map CheckoutContextMsgStock stockDecoder )
            , ( 3, Decode.map CheckoutContextMsgProductUpdate productUpdateDecoder )
            , ( 4, Decode.map CheckoutContextMsgCartOrder cartOrderDecoder )
            ]
            setCheckoutContextMsg
        ]


{-| `CartChange` decoder
-}
cartChangeDecoder : Decode.Decoder CartChange
cartChangeDecoder =
    Decode.message (CartChange "" "" Add)
        [ Decode.optional 3 Decode.string setCartID
        , Decode.optional 1 Decode.string setUuid
        , Decode.optional 2 cartChangeActionDecoder setAction
        ]


{-| `CartOrder` decoder
-}
cartOrderDecoder : Decode.Decoder CartOrder
cartOrderDecoder =
    Decode.message (CartOrder "")
        [ Decode.optional 1 Decode.string setCartID
        ]


{-| `Stock` decoder
-}
stockDecoder : Decode.Decoder Stock
stockDecoder =
    Decode.message (Stock "" 0)
        [ Decode.optional 1 Decode.string setUuid
        , Decode.optional 2 Decode.sint32 setQuantity
        ]



-- ENCODER


toCartChangeActionEncoder : CartChangeAction -> Encode.Encoder
toCartChangeActionEncoder value =
    Encode.int32 <|
        case value of
            Add ->
                0

            Remove ->
                1

            CartChangeActionUnrecognized_ v ->
                v


{-| `CatalogPage` encoder
-}
toCatalogPageEncoder : CatalogPage -> Encode.Encoder
toCatalogPageEncoder model =
    Encode.message
        [ ( 1, Encode.list toProductEncoder model.products )
        , ( 2, Encode.int32 model.totalItems )
        , ( 3, Encode.int32 model.totalPages )
        , ( 4, Encode.int32 model.currentPage )
        , ( 5, Encode.int32 model.setPageTo )
        , ( 6, Encode.string model.sorting )
        , ( 7, Encode.string model.filtering )
        , ( 8, Encode.int32 model.itemsPerPage )
        ]


{-| `Product` encoder
-}
toProductEncoder : Product -> Encode.Encoder
toProductEncoder model =
    Encode.message
        [ ( 1, Encode.string model.uuid )
        , ( 2, Encode.string model.title )
        , ( 3, Encode.string model.description )
        , ( 4, Encode.string model.longtext )
        , ( 8, Encode.string model.category )
        , ( 5, Encode.string model.smallImageURL )
        , ( 6, Encode.string model.largeImageURL )
        , ( 7, Encode.float model.price )
        ]


{-| `ProductUpdate` encoder
-}
toProductUpdateEncoder : ProductUpdate -> Encode.Encoder
toProductUpdateEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toProductEncoder) model.old )
        , ( 2, (Maybe.withDefault Encode.none << Maybe.map toProductEncoder) model.new )
        ]


toCheckoutContextMsgEncoder : CheckoutContextMsg -> ( Int, Encode.Encoder )
toCheckoutContextMsgEncoder model =
    case model of
        CheckoutContextMsgCartChange value ->
            ( 1, toCartChangeEncoder value )

        CheckoutContextMsgStock value ->
            ( 2, toStockEncoder value )

        CheckoutContextMsgProductUpdate value ->
            ( 3, toProductUpdateEncoder value )

        CheckoutContextMsgCartOrder value ->
            ( 4, toCartOrderEncoder value )


{-| `CheckoutContext` encoder
-}
toCheckoutContextEncoder : CheckoutContext -> Encode.Encoder
toCheckoutContextEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toCheckoutContextMsgEncoder model.checkoutContextMsg
        ]


{-| `CartChange` encoder
-}
toCartChangeEncoder : CartChange -> Encode.Encoder
toCartChangeEncoder model =
    Encode.message
        [ ( 3, Encode.string model.cartID )
        , ( 1, Encode.string model.uuid )
        , ( 2, toCartChangeActionEncoder model.action )
        ]


{-| `CartOrder` encoder
-}
toCartOrderEncoder : CartOrder -> Encode.Encoder
toCartOrderEncoder model =
    Encode.message
        [ ( 1, Encode.string model.cartID )
        ]


{-| `Stock` encoder
-}
toStockEncoder : Stock -> Encode.Encoder
toStockEncoder model =
    Encode.message
        [ ( 1, Encode.string model.uuid )
        , ( 2, Encode.sint32 model.quantity )
        ]



-- SETTERS


setProducts : a -> { b | products : a } -> { b | products : a }
setProducts value model =
    { model | products = value }


setTotalItems : a -> { b | totalItems : a } -> { b | totalItems : a }
setTotalItems value model =
    { model | totalItems = value }


setTotalPages : a -> { b | totalPages : a } -> { b | totalPages : a }
setTotalPages value model =
    { model | totalPages = value }


setCurrentPage : a -> { b | currentPage : a } -> { b | currentPage : a }
setCurrentPage value model =
    { model | currentPage = value }


setSetPageTo : a -> { b | setPageTo : a } -> { b | setPageTo : a }
setSetPageTo value model =
    { model | setPageTo = value }


setSorting : a -> { b | sorting : a } -> { b | sorting : a }
setSorting value model =
    { model | sorting = value }


setFiltering : a -> { b | filtering : a } -> { b | filtering : a }
setFiltering value model =
    { model | filtering = value }


setItemsPerPage : a -> { b | itemsPerPage : a } -> { b | itemsPerPage : a }
setItemsPerPage value model =
    { model | itemsPerPage = value }


setUuid : a -> { b | uuid : a } -> { b | uuid : a }
setUuid value model =
    { model | uuid = value }


setTitle : a -> { b | title : a } -> { b | title : a }
setTitle value model =
    { model | title = value }


setDescription : a -> { b | description : a } -> { b | description : a }
setDescription value model =
    { model | description = value }


setLongtext : a -> { b | longtext : a } -> { b | longtext : a }
setLongtext value model =
    { model | longtext = value }


setCategory : a -> { b | category : a } -> { b | category : a }
setCategory value model =
    { model | category = value }


setSmallImageURL : a -> { b | smallImageURL : a } -> { b | smallImageURL : a }
setSmallImageURL value model =
    { model | smallImageURL = value }


setLargeImageURL : a -> { b | largeImageURL : a } -> { b | largeImageURL : a }
setLargeImageURL value model =
    { model | largeImageURL = value }


setPrice : a -> { b | price : a } -> { b | price : a }
setPrice value model =
    { model | price = value }


setOld : a -> { b | old : a } -> { b | old : a }
setOld value model =
    { model | old = value }


setNew : a -> { b | new : a } -> { b | new : a }
setNew value model =
    { model | new = value }


setCheckoutContextMsg : a -> { b | checkoutContextMsg : a } -> { b | checkoutContextMsg : a }
setCheckoutContextMsg value model =
    { model | checkoutContextMsg = value }


setCartID : a -> { b | cartID : a } -> { b | cartID : a }
setCartID value model =
    { model | cartID = value }


setAction : a -> { b | action : a } -> { b | action : a }
setAction value model =
    { model | action = value }


setQuantity : a -> { b | quantity : a } -> { b | quantity : a }
setQuantity value model =
    { model | quantity = value }
