{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Catalog exposing
    ( CatalogMessage(..), CatalogMessages, CatalogPage, Product
    , catalogMessagesDecoder, catalogPageDecoder, productDecoder
    , toCatalogMessagesEncoder, toCatalogPageEncoder, toProductEncoder
    )

{-| ProtoBuf module: `Catalog`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.6.1
  - the following specification file: `catalog.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs CatalogMessage, CatalogMessages, CatalogPage, Product


# Decoder

@docs catalogMessagesDecoder, catalogPageDecoder, productDecoder


# Encoder

@docs toCatalogMessagesEncoder, toCatalogPageEncoder, toProductEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| CatalogMessage
-}
type CatalogMessage
    = CatalogMessageProduct Product


{-| `CatalogMessages` message
-}
type alias CatalogMessages =
    { catalogMessage : Maybe CatalogMessage
    }


{-| `CatalogPage` message
-}
type alias CatalogPage =
    { products : List Product
    , totalItems : Int
    , totalPages : Int
    , currentPage : Int
    , setPageTo : Int
    , sorting : String
    , filtering : String
    , itemsPerPage : Int
    }


{-| `Product` message
-}
type alias Product =
    { id : String
    , price : Int
    , name : String
    , description : String
    , longtext : String
    , category : String
    , smallImageURL : String
    , largeImageURL : String
    , disabled : Bool
    , pimOffset : Int
    }



-- DECODER


{-| `CatalogMessages` decoder
-}
catalogMessagesDecoder : Decode.Decoder CatalogMessages
catalogMessagesDecoder =
    Decode.message (CatalogMessages Nothing)
        [ Decode.oneOf
            [ ( 1, Decode.map CatalogMessageProduct productDecoder )
            ]
            setCatalogMessage
        ]


{-| `CatalogPage` decoder
-}
catalogPageDecoder : Decode.Decoder CatalogPage
catalogPageDecoder =
    Decode.message (CatalogPage [] 0 0 0 0 "" "" 0)
        [ Decode.repeated 1 productDecoder .products setProducts
        , Decode.optional 2 Decode.int32 setTotalItems
        , Decode.optional 3 Decode.int32 setTotalPages
        , Decode.optional 4 Decode.int32 setCurrentPage
        , Decode.optional 5 Decode.int32 setSetPageTo
        , Decode.optional 6 Decode.string setSorting
        , Decode.optional 7 Decode.string setFiltering
        , Decode.optional 8 Decode.int32 setItemsPerPage
        ]


{-| `Product` decoder
-}
productDecoder : Decode.Decoder Product
productDecoder =
    Decode.message (Product "" 0 "" "" "" "" "" "" False 0)
        [ Decode.optional 1 Decode.string setId
        , Decode.optional 2 Decode.int32 setPrice
        , Decode.optional 3 Decode.string setName
        , Decode.optional 4 Decode.string setDescription
        , Decode.optional 5 Decode.string setLongtext
        , Decode.optional 6 Decode.string setCategory
        , Decode.optional 7 Decode.string setSmallImageURL
        , Decode.optional 8 Decode.string setLargeImageURL
        , Decode.optional 9 Decode.bool setDisabled
        , Decode.optional 10 Decode.int32 setPimOffset
        ]



-- ENCODER


toCatalogMessageEncoder : CatalogMessage -> ( Int, Encode.Encoder )
toCatalogMessageEncoder model =
    case model of
        CatalogMessageProduct value ->
            ( 1, toProductEncoder value )


{-| `CatalogMessages` encoder
-}
toCatalogMessagesEncoder : CatalogMessages -> Encode.Encoder
toCatalogMessagesEncoder model =
    Encode.message
        [ Maybe.withDefault ( 0, Encode.none ) <| Maybe.map toCatalogMessageEncoder model.catalogMessage
        ]


{-| `CatalogPage` encoder
-}
toCatalogPageEncoder : CatalogPage -> Encode.Encoder
toCatalogPageEncoder model =
    Encode.message
        [ ( 1, Encode.list toProductEncoder model.products )
        , ( 2, Encode.int32 model.totalItems )
        , ( 3, Encode.int32 model.totalPages )
        , ( 4, Encode.int32 model.currentPage )
        , ( 5, Encode.int32 model.setPageTo )
        , ( 6, Encode.string model.sorting )
        , ( 7, Encode.string model.filtering )
        , ( 8, Encode.int32 model.itemsPerPage )
        ]


{-| `Product` encoder
-}
toProductEncoder : Product -> Encode.Encoder
toProductEncoder model =
    Encode.message
        [ ( 1, Encode.string model.id )
        , ( 2, Encode.int32 model.price )
        , ( 3, Encode.string model.name )
        , ( 4, Encode.string model.description )
        , ( 5, Encode.string model.longtext )
        , ( 6, Encode.string model.category )
        , ( 7, Encode.string model.smallImageURL )
        , ( 8, Encode.string model.largeImageURL )
        , ( 9, Encode.bool model.disabled )
        , ( 10, Encode.int32 model.pimOffset )
        ]



-- SETTERS


setCatalogMessage : a -> { b | catalogMessage : a } -> { b | catalogMessage : a }
setCatalogMessage value model =
    { model | catalogMessage = value }


setProducts : a -> { b | products : a } -> { b | products : a }
setProducts value model =
    { model | products = value }


setTotalItems : a -> { b | totalItems : a } -> { b | totalItems : a }
setTotalItems value model =
    { model | totalItems = value }


setTotalPages : a -> { b | totalPages : a } -> { b | totalPages : a }
setTotalPages value model =
    { model | totalPages = value }


setCurrentPage : a -> { b | currentPage : a } -> { b | currentPage : a }
setCurrentPage value model =
    { model | currentPage = value }


setSetPageTo : a -> { b | setPageTo : a } -> { b | setPageTo : a }
setSetPageTo value model =
    { model | setPageTo = value }


setSorting : a -> { b | sorting : a } -> { b | sorting : a }
setSorting value model =
    { model | sorting = value }


setFiltering : a -> { b | filtering : a } -> { b | filtering : a }
setFiltering value model =
    { model | filtering = value }


setItemsPerPage : a -> { b | itemsPerPage : a } -> { b | itemsPerPage : a }
setItemsPerPage value model =
    { model | itemsPerPage = value }


setId : a -> { b | id : a } -> { b | id : a }
setId value model =
    { model | id = value }


setPrice : a -> { b | price : a } -> { b | price : a }
setPrice value model =
    { model | price = value }


setName : a -> { b | name : a } -> { b | name : a }
setName value model =
    { model | name = value }


setDescription : a -> { b | description : a } -> { b | description : a }
setDescription value model =
    { model | description = value }


setLongtext : a -> { b | longtext : a } -> { b | longtext : a }
setLongtext value model =
    { model | longtext = value }


setCategory : a -> { b | category : a } -> { b | category : a }
setCategory value model =
    { model | category = value }


setSmallImageURL : a -> { b | smallImageURL : a } -> { b | smallImageURL : a }
setSmallImageURL value model =
    { model | smallImageURL = value }


setLargeImageURL : a -> { b | largeImageURL : a } -> { b | largeImageURL : a }
setLargeImageURL value model =
    { model | largeImageURL = value }


setDisabled : a -> { b | disabled : a } -> { b | disabled : a }
setDisabled value model =
    { model | disabled = value }


setPimOffset : a -> { b | pimOffset : a } -> { b | pimOffset : a }
setPimOffset value model =
    { model | pimOffset = value }
