{- !!! DO NOT EDIT THIS FILE MANUALLY !!! -}


module Catalog exposing
    ( CatalogRequestSorting(..), CatalogRequest, CatalogResponse, ProductRequest, ProductResponse
    , catalogRequestDecoder, catalogResponseDecoder, productRequestDecoder, productResponseDecoder
    , toCatalogRequestEncoder, toCatalogResponseEncoder, toProductRequestEncoder, toProductResponseEncoder
    )

{-| ProtoBuf module: `Catalog`

This module was generated automatically using

  - [`protoc-gen-elm`](https://www.npmjs.com/package/protoc-gen-elm) 1.0.0-beta-2
  - `protoc` 3.6.1
  - the following specification file: `api.proto`

To run it use [`elm-protocol-buffers`](https://package.elm-lang.org/packages/eriktim/elm-protocol-buffers/1.1.0) version 1.1.0 or higher.


# Model

@docs CatalogRequestSorting, CatalogRequest, CatalogResponse, ProductRequest, ProductResponse


# Decoder

@docs catalogRequestDecoder, catalogResponseDecoder, productRequestDecoder, productResponseDecoder


# Encoder

@docs toCatalogRequestEncoder, toCatalogResponseEncoder, toProductRequestEncoder, toProductResponseEncoder

-}

import Protobuf.Decode as Decode
import Protobuf.Encode as Encode



-- MODEL


{-| `CatalogRequestSorting` enumeration
-}
type CatalogRequestSorting
    = Id
    | Price
    | Name
    | CatalogRequestSortingUnrecognized_ Int


{-| `CatalogRequest` message
-}
type alias CatalogRequest =
    { sorting : CatalogRequestSorting
    , prefix : String
    , page : Int
    , itemsPerPage : Int
    }


{-| `CatalogResponse` message
-}
type alias CatalogResponse =
    { request : Maybe CatalogRequest
    , products : List ProductResponse
    , totalItems : Int
    , totalPages : Int
    }


{-| `ProductRequest` message
-}
type alias ProductRequest =
    { id : String
    }


{-| `ProductResponse` message
-}
type alias ProductResponse =
    { id : String
    , price : Int
    , name : String
    , description : String
    , longtext : String
    , category : String
    , smallImageURL : String
    , largeImageURL : String
    , disabled : Bool
    }



-- DECODER


catalogRequestSortingDecoder : Decode.Decoder CatalogRequestSorting
catalogRequestSortingDecoder =
    Decode.int32
        |> Decode.map
            (\value ->
                case value of
                    0 ->
                        Id

                    1 ->
                        Price

                    2 ->
                        Name

                    v ->
                        CatalogRequestSortingUnrecognized_ v
            )


{-| `CatalogRequest` decoder
-}
catalogRequestDecoder : Decode.Decoder CatalogRequest
catalogRequestDecoder =
    Decode.message (CatalogRequest Id "" 0 0)
        [ Decode.optional 1 catalogRequestSortingDecoder setSorting
        , Decode.optional 2 Decode.string setPrefix
        , Decode.optional 3 Decode.int32 setPage
        , Decode.optional 4 Decode.int32 setItemsPerPage
        ]


{-| `CatalogResponse` decoder
-}
catalogResponseDecoder : Decode.Decoder CatalogResponse
catalogResponseDecoder =
    Decode.message (CatalogResponse Nothing [] 0 0)
        [ Decode.optional 1 (Decode.map Just catalogRequestDecoder) setRequest
        , Decode.repeated 9 productResponseDecoder .products setProducts
        , Decode.optional 2 Decode.int32 setTotalItems
        , Decode.optional 3 Decode.int32 setTotalPages
        ]


{-| `ProductRequest` decoder
-}
productRequestDecoder : Decode.Decoder ProductRequest
productRequestDecoder =
    Decode.message (ProductRequest "")
        [ Decode.optional 1 Decode.string setId
        ]


{-| `ProductResponse` decoder
-}
productResponseDecoder : Decode.Decoder ProductResponse
productResponseDecoder =
    Decode.message (ProductResponse "" 0 "" "" "" "" "" "" False)
        [ Decode.optional 1 Decode.string setId
        , Decode.optional 2 Decode.int32 setPrice
        , Decode.optional 3 Decode.string setName
        , Decode.optional 4 Decode.string setDescription
        , Decode.optional 5 Decode.string setLongtext
        , Decode.optional 6 Decode.string setCategory
        , Decode.optional 7 Decode.string setSmallImageURL
        , Decode.optional 8 Decode.string setLargeImageURL
        , Decode.optional 9 Decode.bool setDisabled
        ]



-- ENCODER


toCatalogRequestSortingEncoder : CatalogRequestSorting -> Encode.Encoder
toCatalogRequestSortingEncoder value =
    Encode.int32 <|
        case value of
            Id ->
                0

            Price ->
                1

            Name ->
                2

            CatalogRequestSortingUnrecognized_ v ->
                v


{-| `CatalogRequest` encoder
-}
toCatalogRequestEncoder : CatalogRequest -> Encode.Encoder
toCatalogRequestEncoder model =
    Encode.message
        [ ( 1, toCatalogRequestSortingEncoder model.sorting )
        , ( 2, Encode.string model.prefix )
        , ( 3, Encode.int32 model.page )
        , ( 4, Encode.int32 model.itemsPerPage )
        ]


{-| `CatalogResponse` encoder
-}
toCatalogResponseEncoder : CatalogResponse -> Encode.Encoder
toCatalogResponseEncoder model =
    Encode.message
        [ ( 1, (Maybe.withDefault Encode.none << Maybe.map toCatalogRequestEncoder) model.request )
        , ( 9, Encode.list toProductResponseEncoder model.products )
        , ( 2, Encode.int32 model.totalItems )
        , ( 3, Encode.int32 model.totalPages )
        ]


{-| `ProductRequest` encoder
-}
toProductRequestEncoder : ProductRequest -> Encode.Encoder
toProductRequestEncoder model =
    Encode.message
        [ ( 1, Encode.string model.id )
        ]


{-| `ProductResponse` encoder
-}
toProductResponseEncoder : ProductResponse -> Encode.Encoder
toProductResponseEncoder model =
    Encode.message
        [ ( 1, Encode.string model.id )
        , ( 2, Encode.int32 model.price )
        , ( 3, Encode.string model.name )
        , ( 4, Encode.string model.description )
        , ( 5, Encode.string model.longtext )
        , ( 6, Encode.string model.category )
        , ( 7, Encode.string model.smallImageURL )
        , ( 8, Encode.string model.largeImageURL )
        , ( 9, Encode.bool model.disabled )
        ]



-- SETTERS


setSorting : a -> { b | sorting : a } -> { b | sorting : a }
setSorting value model =
    { model | sorting = value }


setPrefix : a -> { b | prefix : a } -> { b | prefix : a }
setPrefix value model =
    { model | prefix = value }


setPage : a -> { b | page : a } -> { b | page : a }
setPage value model =
    { model | page = value }


setItemsPerPage : a -> { b | itemsPerPage : a } -> { b | itemsPerPage : a }
setItemsPerPage value model =
    { model | itemsPerPage = value }


setRequest : a -> { b | request : a } -> { b | request : a }
setRequest value model =
    { model | request = value }


setProducts : a -> { b | products : a } -> { b | products : a }
setProducts value model =
    { model | products = value }


setTotalItems : a -> { b | totalItems : a } -> { b | totalItems : a }
setTotalItems value model =
    { model | totalItems = value }


setTotalPages : a -> { b | totalPages : a } -> { b | totalPages : a }
setTotalPages value model =
    { model | totalPages = value }


setId : a -> { b | id : a } -> { b | id : a }
setId value model =
    { model | id = value }


setPrice : a -> { b | price : a } -> { b | price : a }
setPrice value model =
    { model | price = value }


setName : a -> { b | name : a } -> { b | name : a }
setName value model =
    { model | name = value }


setDescription : a -> { b | description : a } -> { b | description : a }
setDescription value model =
    { model | description = value }


setLongtext : a -> { b | longtext : a } -> { b | longtext : a }
setLongtext value model =
    { model | longtext = value }


setCategory : a -> { b | category : a } -> { b | category : a }
setCategory value model =
    { model | category = value }


setSmallImageURL : a -> { b | smallImageURL : a } -> { b | smallImageURL : a }
setSmallImageURL value model =
    { model | smallImageURL = value }


setLargeImageURL : a -> { b | largeImageURL : a } -> { b | largeImageURL : a }
setLargeImageURL value model =
    { model | largeImageURL = value }


setDisabled : a -> { b | disabled : a } -> { b | disabled : a }
setDisabled value model =
    { model | disabled = value }
