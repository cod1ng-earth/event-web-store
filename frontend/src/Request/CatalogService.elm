{-
   api.proto
   No description provided (generated by Openapi Generator https://github.com/openapitools/openapi-generator)

   The version of the OpenAPI document: version not set

   NOTE: This file is auto generated by the openapi-generator.
   https://github.com/openapitools/openapi-generator.git
   Do not edit this file manually.
-}


module Request.CatalogService exposing (fetchPage, Sorting(..), fetchProduct)

import Data.CatalogProductResponse as CatalogProductResponse exposing (CatalogProductResponse)
import Data.CatalogCatalogResponse as CatalogCatalogResponse exposing (CatalogCatalogResponse)
import Dict
import Http
import Json.Decode as Decode
import Url.Builder as Url


type Sorting
    = ID
    | PRICE
    | NAME

sortingToString : Sorting -> String
sortingToString value =
    case value of
        ID ->
            "ID"

        PRICE ->
            "PRICE"

        NAME ->
            "NAME"







fetchPage :
    { onSend : Result Http.Error CatalogCatalogResponse -> msg
    , basePath : String



    , sorting : Maybe (Sorting)    , prefix : Maybe (String)    , page : Maybe (String)    , itemsPerPage : Maybe (String)
    }
    -> Cmd msg
fetchPage params =
    Http.request
        { method = "GET"
        , headers = []
        , url = Url.crossOrigin params.basePath
            ["catalog", "page"]
            (List.filterMap identity [Maybe.map (Url.string "sorting" << sortingToString) params.sorting, Maybe.map (Url.string "prefix" ) params.prefix, Maybe.map (Url.string "page" ) params.page, Maybe.map (Url.string "itemsPerPage" ) params.itemsPerPage])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend CatalogCatalogResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }


fetchProduct :
    { onSend : Result Http.Error CatalogProductResponse -> msg
    , basePath : String



    , id : Maybe (String)
    }
    -> Cmd msg
fetchProduct params =
    Http.request
        { method = "GET"
        , headers = []
        , url = Url.crossOrigin params.basePath
            ["catalog", "product"]
            (List.filterMap identity [Maybe.map (Url.string "id" ) params.id])
        , body = Http.emptyBody
        , expect = Http.expectJson params.onSend CatalogProductResponse.decoder
        , timeout = Just 30000
        , tracker = Nothing
        }
